#!/bin/bash
#BASH SCRIPT TO CALCULATE THE ENERGY OF A GROMACS TRAJECTORY ANOTHER POLYMORPH

#inputs:
#Takes in job directory for polymorph to be mapped from  (pAdir) and job directory for polymorph to be mapped to (pBdir)
#Script throws out inconsistent configurations, creates trajectory of polymorph B made of mapped polymporph A and evaluates the energy
#of then mapped polymorph B and the corresponding configurations in polymorph A.
#It creates a MappedGRO directory corresponding to the pAdir which contains 


SETRUN_ARGS="$@"
#pAdir="benzene_GRO_GROM_p2_72_4ind_200K_100L_100G_001P_G"
#pBdir="benzene_GRO_GROM_p1_72_4ind_200K_100L_100G_001P_G"
paramfile_oplsaa="oplsaa.ff"
paramfile_oplsaa_fake="oplsaafake.ff"
paramfile_gromos="gromos54a7.ff"
paramfile_amoeba="amoeba09.prm"
outputfile="energy.xvg"
bnztop="benzene_topology"
bnztrr="benzene_PROD"
bnztpr="benzene_PROD"
bnzmdp="benzene_production"


export GRO_LOC="/home/nps5kd/gromacs_forceavg/install/bin"

export SCRIPT_LOC="/home/nps5kd/crystals"
export SCRIPT_LOC2="/home/nps5kd/crystals/NMA/benzenephase/pythonfiles"
dt="1"

#=============================================================================================
# READ IN USER INPUTS
#=============================================================================================
while getopts "A:B:o:top:trr:tpr:mdp:" opt; do
        case $opt in
        A )
                pAdir=$OPTARG
                ;;
	B )
                pBdir=$OPTARG
                ;;
        o )
                outputfile=$OPTARG
                ;;
	top )
		bnztop=$OPTARG
		;;
	trr )
                bnztpr=$OPTARG
                ;;
        tpr )
                bnztpr=$OPTARG
                ;;
        mdp )
                bnzmdp=$OPTARG
                ;;

        esac
done




#Make a directory for the individual frames if it does not aleady exist
mkdir MappedGRO${pAdir}
echo ${pAdir}

#Convert the trajectory into a set of full precision gro files using trjconv
echo '2 0' | trjconv_d -f ${pAdir}/${bnztrr}.trr -s ${pAdir}/${bnztpr}.tpr -o MappedGRO${pAdir}/pA.gro -pbc nojump -ndec 8
echo '2 0' | trjconv_d -f ${pBdir}/${bnztrr}.trr -s ${pBdir}/${bnztpr}.tpr -o MappedGRO${pAdir}/pB.gro -pbc nojump -ndec 8




#=============================================================================================
# COMPUTE MAPPED CONFIGURATION ENERGY
#=============================================================================================

#Copy over the appropriate files for B
cp ${pBdir}/${bnztop}.top MappedGRO${pAdir}/${bnztop}.top
cp ${pBdir}/${bnzmdp}.mdp MappedGRO${pAdir}/${bnzmdp}.mdp
cp ${pBdir}/benzene.itp MappedGRO${pAdir}/benzene.itp
cp ${pBdir}/posre.itp MappedGRO${pAdir}/posre.itp
cp ${pBdir}/benzene_restraint.gro MappedGRO${pAdir}/benzene_restraintB.gro



#copy over the appropriate files for A
cp ${pAdir}/benzene_restraint.gro MappedGRO${pAdir}/benzene_restraintA.gro
cp ${pAdir}/${bnztop}.top MappedGRO${pAdir}/benzene_topologyA.top
cp ${pAdir}/${bnzmdp}.mdp MappedGRO${pAdir}/benzene_productionA.mdp
cp ${pAdir}/benzene.itp MappedGRO${pAdir}/benzeneA.itp
cp ${pAdir}/posre.itp MappedGRO${pAdir}/posreA.itp

sed 's/benzene.itp/benzeneA.itp/' MappedGRO${pAdir}/benzene_topologyA.top > tmpfile ; mv tmpfile MappedGRO${pAdir}/benzene_topologyA.top
sed 's/posre.itp/posreA.itp/' MappedGRO${pAdir}/benzene_topologyA.top > tmpfile ; mv tmpfile MappedGRO${pAdir}/benzene_topologyA.top



cd MappedGRO${pAdir}

#Map each configuration to the other ensemble
python ${SCRIPT_LOC2}/tossconfigurations.py -i pA.gro -r benzene_restraintA.gro -o pAnew.gro
python ${SCRIPT_LOC2}/tossconfigurations.py -i pB.gro -r benzene_restraintB.gro -o pBnew.gro
python ${SCRIPT_LOC}/kabschmany3.py -A pAnew.gro -B pBnew.gro -p False -f False

cd ..

mapgro="run.mapped.gro"
origgro="orig.gro"
echo "Mapped Gro created"

cd MappedGRO${pAdir}

#Remove any symmetry averaging if it is included
less ${bnzmdp}.mdp | grep -v "ave-group" | grep -v "ave-ngroup" | grep -v "symmetry-averaging" > benzenemdp.mdp
less benzene_productionA.mdp | grep -v "ave-group" | grep -v "ave-ngroup" | grep -v "symmetry-averaging" > benzene_productionA1.mdp

#calculate energy for pB evaluated in pA
echo "Calculating energy..."
${GRO_LOC}/grompp_d -f benzenemdp.mdp -c $mapgro -p ${bnztop}.top -o bnztpr.tpr -maxwarn 10 -r benzene_restraintB.gro
${GRO_LOC}/mdrun_d  -v -rerun $mapgro -s bnztpr.tpr -deffnm mapped -e mappedenergy.edr
echo -e "Potential\n1 2 3 4 5 7 8 6 9 10 0" | ${GRO_LOC}/g_energy_d -f mappedenergy.edr -o "mappedenergy.xvg"

echo "recalculating original"
${GRO_LOC}/grompp_d -f benzene_productionA1.mdp -c $origgro -p benzene_topologyA.top -o bnztprA.tpr -maxwarn 10 -r benzene_restraintA.gro
${GRO_LOC}/mdrun_d  -v -rerun $origgro -s bnztprA.tpr -deffnm original -e originalenergy.edr
echo -e "Potential\n1 2 3 4 5 7 8 6 9 10 0" | ${GRO_LOC}/g_energy_d -f originalenergy.edr -o "originalenergy.xvg"

echo "making pdb trajectories"
echo '2 0' | ${GRO_LOC}/trjconv_d -f orig.gro -s bnztprA.tpr -o orig.pdb
echo '2 0' | ${GRO_LOC}/trjconv_d -f run.mapped.gro -s bnztpr.tpr -o run.mapped.pdb

#python ~/crystals/mappingmbar.py -A potenergyA.xvg -B mappedenergy.xvg

cd ..


echo "Energy Evaluation Done!"

