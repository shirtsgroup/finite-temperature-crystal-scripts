#!/bin/bash

#BASH SCRIPT TO SET UP AN MD SIMULATION BASED ON USER SPECIFICATIONS
#By: Eric Dybeck 12/22/2015
#param n - polymorph number in the form 'p1'
#param T - Temperature in K
#param P - Pressure in bar
#param M - Molecule name
#param N - Number of total molecules
#param I - Number of independent molecules (the remainder will be averaged)
#param e - Number of steps in the equilibration step
#param p - Number of steps in the production step
#param i - Integrator
#param t - Thermostat
#param b - Barostat
#param a - number of cores (threads) to run on
#param k - minimum harmonic restraint constant
#param K - maximum harmonic restraint constant
#param D - drude oscillator spring constant (%)
#param L - lambda state for the harmonic restraint
#param U - unrestrained lambda value (%)
#param R - restrained lambda value (%)
#param s - spacing between the lambdas
#param f - functional form (exponent) of the spacing between the lambdas
#param G - Gamma state for the removal of intermolecular interactions
#param g - spacing between the gammas
#param d - Percentage for alchemically interpolating the original itp file (%)
#param V - desired box volume (in cubic nm)
#param r - vdw/coulomb cutoff distance (in angstroms)
#param u - potential to be used in the simulation
#param c - charge assigned to the carbon and hydrogen 
#param C - Sigma value for Carbon (% of actual)
#param H - Sigma value for Hydrogen (% of actual) 
#param z - specify which simulation package we will use (gromacs or tinker)
#param h - optional string hinge to add to the job
#param E - specify the Thermodynamic Ensemble that will be used
#param o - number of production outputs

#Give these parameters, the script creates a directory in the jobs folder and copies
#over the relevant .mdp, .gro and topology files to carry out the job. In addition
#the .mdp files are manipulated away from the defaults based on the user specified
#parameters. Finally, local and cluster submission scripts are copied over to allow
#the job to be run.


export TEMPLATEPATH="../runfiles"

#=============================================================================================
# SETUP DEFAULT VALUES AND READ IN PARAMETERS FROM USER
#=============================================================================================

SETRUN_ARGS="$@"
#Default Values
polymorph_num="p1"
TEMP=-1
PRESSURE=1
MOLECULE="benzene"
MOLECULES=72
INDEPENDENT="same"
equil_steps=100000
prod_steps=40000000
anneal_steps=10000
integrator="sd"
thermostat="nose-hoover"
barostat="Parrinello-Rahman"
cores=1
k_min=0
k_max=1000
drude_k=100
Lambda=0
MINLAMBDA=0
MAXLAMBDA=0
LSPACING=100
MAXGAMMA=100
MINGAMMA=100
GAMMA=100
GSPACING=100
DELTA=0
EXPONENT=1
VOLUME=-1
CUTOFF="8"
EQOUTPUTS="100"
EMTRROUTPUTS="100"
PRODOUTPUTS="20000"
PRODTRROUTPUTS="100"
ANNEALOUTPUTS="10000"
ANNEALTRROUTPUTS="100"
PHASE="DefaultPhase"
SIMULATION="gromacs"
POTENTIAL="oplsaa"
ENSEMBLE="NPT"
CHARGE="0.1150"
SigmaC="100"
SigmaH="100"
hinge="DefaultHinge"

export SCRIPT_LOC="/home/ecd4bd/crystals/NMA/scripts"

#options passed in from the users
while getopts "n:T:P:M:N:I:e:p:o:i:t:b:a:k:K:D:L:U:R:s:f:A:B:G:g:d:V:r:u:c:C:H:z:E:h:" opt; do
        case $opt in
        n )
                polymorph_num=$OPTARG
                ;;
        T )
                TEMP=$OPTARG
                ;;
	P )
		PRESSURE=$OPTARG
		;;
	M )
		MOLECULE=$OPTARG
		;;
	N )
		MOLECULES=$OPTARG
		;;
	I )
		INDEPENDENT=$OPTARG
		;;
	e )
		equil_steps=$OPTARG
		;;
	p )
		prod_steps=$OPTARG
		;;
	o )
		PRODOUTPUTS=$OPTARG
		PRODTRROUTPUTS=$OPTARG
		;;
	i )
		integrator=$OPTARG
		;;
	t )
		thermostat=$OPTARG
		;;
	b )
		barostat=$OPTARG
		;;
	a )
		cores=$OPTARG
		;;
	k )
                k_min=$OPTARG
                ;;
	K )
		k_max=$OPTARG
		;;
	D )
		drude_k=$OPTARG
		;;
	L )
		Lambda=$OPTARG
		;;
	U )
                MINLAMBDA=$OPTARG
                ;;
        R )
                MAXLAMBDA=$OPTARG
                ;;
        s )
                LSPACING=$OPTARG
                ;;
	f )
		EXPONENT=$OPTARG
		;;
	A )
		MAXGAMMA=$OPTARG
		;;
	B )
		MINGAMMA=$OPTARG
		;;
	G )
		GAMMA=$OPTARG
		;;
	g )
		GSPACING=$OPTARG
		;;
	d )
		DELTA=$OPTARG
		;;
	V )
		VOLUME=$OPTARG
		;;
	r )
		CUTOFF=$OPTARG
		;;
	u )
		POTENTIAL=$OPTARG
		;;
	c )
		CHARGE=$OPTARG
		;;
	C )
		SigmaC=$OPTARG
		;;
	H )
		SigmaH=$OPTARG
		;;
	z )
		SIMULATION=$OPTARG
		;;
	E )
		ENSEMBLE=$OPTARG
		;;
	h )
		hinge=$OPTARG
		;;
        esac
done

#=============================================================================================
# ENSURE THAT INPUTS HAVE BEEN PROPERLY ENTERED
#=============================================================================================

#TEMPERATURE
if [ $TEMP == "-1" ]; then
        echo "Invalid Temperature: $TEMP"
        exit 1
fi

#PRESSURE
if [ "$PRESSURE" -lt "0" ]; then
	echo "Invalid Pressure: $PRESSURE"
	exit 1
fi

##POLYMORPH NUMBER
#if [ $polymorph_num != "p1" ] && [ $polymorph_num != "p2" ] && [ $polymorph_num != "p3" ] && [ $polymorph_num != "gas" ]; then
#	echo "Unrecognized polymorph Number: $polymorph_num"
#	exit 1
if [ "$polymorph_num" == "gas" ]; then
	integrator="sd"
	CUTOFF="20"	
	thermostat="andersen"
fi

#INDEPENDENT MOLECULES
if [ "$INDEPENDENT" == "same" ] || [ "$INDEPENDENT" == "$MOLECULES" ]; then
    INDEPENDENT=$MOLECULES
    independenthinge="$MOLECULES"
else
    independenthinge="${INDEPENDENT}ind"
fi

#SYSTEM
grofiles=$(ls ${TEMPLATEPATH}/*.gro | grep "${MOLECULE}_" | grep "_${polymorph_num}_" | grep "_${MOLECULES}" | grep "_${independenthinge}")
xyzfiles=$(ls ${TEMPLATEPATH}/*.xyz | grep "${MOLECULE}_" | grep "_${polymorph_num}_" | grep "_${MOLECULES}")
if [ "$SIMULATION" == "gromacs" ] && [ "$grofiles" == "" ]; then
    echo "There are no available files in the runfiles directory for the combination: "
    echo "Molecule: $MOLECULE"
    echo "Polymorph: $polymorph_num"
    echo "Number: $MOLECULES"
    echo "Independent: $INDEPENDENT"
    exit 1
elif [ "$SIMULATION" == "tinker" ] && [ "$xyzfiles" == "" ]; then
    echo "There are no available files in the runfiles directory for the combination: "
    echo "Molecule: $MOLECULE"
    echo "Polymorph: $polymorph_num"
    echo "Number: $INDEPENDENT"
    exit 1

fi

#THERMOSTAT
if [ "$thermostat" != "berendsen" ] && [ "$thermostat" != "v-rescale" ] && [ "$thermostat" != "andersen" ] && [ "$thermostat" != "nose-hoover" ] && [ "$thermostat" != "bussi" ] ; then
        echo "Unrecognized thermostat: $thermostat"
        echo "Supported thermostats: berendsen v-rescale andersen nose-hoover bussi"
        exit 1
fi
#if [ "$GAMMA" == "0" ]; then
#        thermostat="andersen"
#fi
if [ "$barostat" == "parrinello-rahman" ]; then
        thermostat="nose-hoover"
fi

#INTEGRATOR
if [ "$integrator" != "md" ] && [ "$integrator" != "md-vv" ] && [ "$integrator" != "sd" ]; then
	echo "Unrecognized integrator: $integrator"
	exit 1
elif [ "$polymorph_num" = "gas" ]; then
	integrator="md-vv"
fi
if [ "$thermostat" == "andersen" ]; then
	integrator="md-vv"
fi
#if [ "$barostat" == "parrinello-rahman" ]; then
#	integrator="md"
#elif [ "$barostat" == "MTTK" ]; then
#	integrator="md-vv"
#fi

#BAROSTAT
if [ "$barostat" != "berendsen" ] && [ "$barostat" != "Parrinello-Rahman" ] && [ "$barostat" != "MTTK" ] && [ "$barostat" != "montecarlo" ]; then
        echo "Unrecognized barostat: $barostat"
        echo "Supported barostats: berendsen Parrinello-Rahman MTTK montecarlo"
        exit 1
fi

##RESTRAINT SPRING CONSTANT
#if [ "$k_max" -lt "0" ]; then
#	echo "Invalid spring constant: $k_max"
#	exit 1
#fi

#DRUDE SPRING CONSTANT
if [ "$drude_k" -gt "999" ]; then
        echo "Drude spring constant too strong: $drude_k"
        exit 1
elif [ "$drude_k" -lt "1" ]; then
	echo "Drude spring constant too weak: $drude_k"
        exit 1
fi

#LAMBDA POINT
if [ "$Lambda" -lt "0" ] || [ "$Lambda" -gt "100" ]; then
	echo "Invalid Lambda point: $Lambda"
	exit 1
fi

if [ "$MINLAMBDA" -lt "0" ] || [ "$MAXLAMBDA" -gt "100" ] || [ "$MINLAMBDA" -gt "$MAXLAMBDA" ]; then
        echo "Minimum Lambda: $MINLAMBDA"
        echo "Maximum Lambda: $MAXLAMBDA"
        echo "Is not a valid lambda range!"
        exit 1
fi

if [ "$LSPACING" -le "0" ]; then
        echo "Invalid Lambda Spacing: $LSPACING"
        exit 1
fi

if [ "$EXPONENT" -lt "0" ] || [ "$EXPONENT" -gt "4" ]; then
        echo "Invalid Exponent: $EXPONENT"
        exit 1
fi

#GAMMA POINT
if [ "$GSPACING" -le "0" ]; then
        echo "Invalid Gambda Spacing: $GSPACING"
        exit 1
fi

#SIGMAC
if [ "$SigmaC" -le "0" ]; then
        echo "Invalid SigmaC value: $SigmaC"
        exit 1
fi

#SIGMAH
if [ "$SigmaH" -le "0" ]; then
        echo "Invalid SigmaC value: $SigmaH"
        exit 1
fi

#CUTOFF RADIUS
if [ "$CUTOFF" -lt "0" ]; then
	echo "Invalid Cutoff Radius: $CUTOFF"
	exit 1
fi

#POTENTIAL
potentiallist=("oplsaa gromos designedg oplsaatodesignedg designeda oplsaatodesigneda amoeba09 DMA PCA amoeba09todesa amoeba09restraint amoeba09interactions amoeba09multinp amoeba09mononp amoeba09monoopls amoeba09opls day drude")
valid="false"
for pot in $potentiallist; do
    if [ "$POTENTIAL" == "$pot" ]; then
        valid="true"
    fi
done
if [ "$valid" == "false" ]; then
        echo "Unsupported potential: $POTENTIAL"
        echo "Supported potentials: $potentiallist"
        exit 1
fi

#SIMULATION PACKAGE
if [ "$SIMULATION" != "gromacs" ] && [ "$SIMULATION" != "tinker" ]; then
        echo "Invalid Simulation Package: $SIMULATION"
        echo "Supported Simulations: gromacs tinker"
        exit 1
#elif [ "$SIMULATION" == "tinker" ]; then
#	PRODOUTPUTS="1000"
#        PRODTRROUTPUTS="1000"
fi

#ENSEMBLE
if [ "$ENSEMBLE" != "NVE" ] && [ "$ENSEMBLE" != "NVT" ] && [ "$ENSEMBLE" != "NPT" ]; then
	echo "Invalid Thermodynamic Ensemble: $ENSEMBLE"
	echo "Supported Ensembles: NVE, NVT, NPT"
	exit 1	
fi

#=============================================================================================
# FORMAT INPUTS FOR THE NAME OF THE JOB
#=============================================================================================
#Format the temperature name
if [ "$TEMP" -lt "10" ]; then
        export TEMPNAME="00$TEMP"
elif [ "$TEMP" -lt "100" ]; then
        export TEMPNAME="0$TEMP"
else
        export TEMPNAME=$TEMP
fi

#Format the number of molecules
if [ "$MOLECULES" == "$INDEPENDENT" ]; then
	export MOLNUM="$MOLECULES"
else
	export MOLNUM="${MOLECULES}_${INDEPENDENT}ind"
fi

#Format the lambda point name
if [ "$SIMULATION" == "tinker" ]; then
        export LNAME=""
elif [ "$Lambda" -lt "10" ]; then
        export LNAME="_00${Lambda}L"
elif [ "$Lambda" -lt "100" ]; then
        export LNAME="_0${Lambda}L"
else
        export LNAME="_100L"
fi

#Format the gamma point name
if [ "$SIMULATION" == "tinker" ]; then
        export GaNAME=""
elif [ "$GAMMA" -lt "10" ]; then
        export GaNAME="_00${GAMMA}G"
elif [ "$GAMMA" -lt "100" ]; then
        export GaNAME="_0${GAMMA}G"
else
        export GaNAME="_100G"
fi

#Format the DELTA point name
DNAME=$(echo "scale=0;100*(${EXPONENT})" | bc | sed -r 's/^(-?)\./\10./')
DNAME=$(printf "%.0f\n" "$DNAME")
if [ "$POTENTIAL" != "oplsaatofakeg" ] && [ " $POTENTIAL" != "oplsaatofakea" ] && [ "$POTENTIAL" != "amoeba09todesa" ] && [ "$POTENTIAL" != "amoeba09restraint" ] && [ "$POTENTIAL" != "amoeba09interactions" ]; then
	export DNAME=""
elif [ "$DNAME" -lt "10" ]; then
        export DNAME="_00${DNAME}D"
elif [ "$DNAME" -lt "100" ]; then
        export DNAME="_0${DNAME}D"
else
        export DNAME="_100D"
fi

#Format the volume if specified
if [ $VOLUME == "-1" ]; then
	VNAME=""
elif [ "$VOLUME" -lt "10" ]; then
	VNAME=$(echo "$VOLUME*100/1" | bc)
	VNAME="_0${VNAME}V"
elif [ "$VOLUME" -lt "100" ]; then
	VNAME=$(echo "$VOLUME*100/1" | bc)
        VNAME="_${VNAME}V"
else
	VNAME="_${VOLUME}V"
fi

#Format the pressure if specified
if [ $PRESSURE == "-1" ]; then
        PNAME=""
elif [ "$PRESSURE" == "initial" ]; then
	PNAME=""
elif [ "$PRESSURE" -lt "10" ]; then
        PNAME="_00${PRESSURE}P"
elif [ "$PRESSURE" -lt "100" ]; then
        PNAME=$(echo "$PRESSURE*100/1" | bc)
        PNAME="_0${PRESSURE}P"
else
        PNAME="_${PRESSURE}P"
fi

echo $POTENTIAL

#Format the potential
if [ "$POTENTIAL" == "oplsaa" ]; then
	PotNAME="OPLS";
elif [ "$POTENTIAL" == "gromos" ]; then
        PotNAME="GROM";
elif [ "$POTENTIAL" == "designedg" ]; then
	PotNAME="DESG";
elif [ "$POTENTIAL" == "oplsaatodesignedg" ]; then
        PotNAME="OPLSDESG";
elif [ "$POTENTIAL" == "designeda" ]; then
        PotNAME="DESA";
elif [ "$POTENTIAL" == "oplsaatodesigneda" ]; then
        PotNAME="OPLSDESA";
elif [ "$POTENTIAL" == "DMA" ]; then
        PotNAME="DMA"
elif [ "$POTENTIAL" == "PCA" ]; then
        PotNAME="PCA"
elif [ "$POTENTIAL" == "amoeba09" ] || [ "$POTENTIAL" == "amoeba09todesa" ] || [ "$POTENTIAL" == "amoeba09restraint" ] [ "$POTENTIAL" == "amoeba09interactions" ]; then
	PotNAME="AMO";
elif [ "$POTENTIAL" == "amoeba09multinp" ]; then
        PotNAME="MULTI";
elif [ "$POTENTIAL" == "amoeba09mononp" ]; then
        PotNAME="MONONP";
elif [ "$POTENTIAL" == "amoeba09monoopls" ]; then
        PotNAME="MONOOPLS";
elif [ "$POTENTIAL" == "amoeba09opls" ]; then
        PotNAME="AMOOPLS";
elif [ "$POTENTIAL" == "day" ]; then
	PotNAME="DAY"
elif [ "$POTENTIAL" == "drude" ]; then
	PotNAME="DRUDE"
fi

#Format the charge and Sigma value names
if [ "$POTENTIAL" == "gromos" ] || [ "$POTENTIAL" == "oplsaa" ]; then
    CHARGE="" #Deprecated
    Chargename=""
    SigmaCname=""
    SigmaHname=""
elif [ "$MOLECULE" != "benzene" ]; then
    CHARGE=""
    Chargename=""
    SigmaCname=""
    SigmaHname=""
elif [ "$POTENTIAL" == "drude" ]; then
    CHARGE=""
    Chargename=""
    SigmaCname=""
    SigmaHname=""
elif [ "$POTENTIAL" == "oplsaatofakeg" ] || [ "$POTENTIAL" == "oplsaatofakea" ]; then
    Chargename="_C$(echo $CHARGE | tr -d .)${DNAME}"
    #SigmaCname="_C${SigmaC}"
    #SigmaHname="H${SigmaH}"
    SigmaCname=""
    SigmaHname=""
else
    Chargename="_C$(echo $CHARGE | tr -d .)" 
    #SigmaCname="_C${SigmaC}"
    #SigmaHname="H${SigmaH}"
    SigmaCname=""
    SigmaHname=""
fi

#Format the drude spring constant name
if [ "$SIMULATION" == "tinker" ] || [ "$POTENTIAL" != "drude" ]; then
        export Drudename=""
elif [ "$drude_k" -lt "10" ]; then
        export Drudename="_00${drude_k}D"
elif [ "$drude_k" -lt "100" ]; then
        export Drudename="_0${drude_k}D"
else
        export Drudename="_${drude_k}D"
fi

#Format the simulation
if [ "$SIMULATION" == "gromacs" ]; then
	SimNAME="GRO";
elif [ "$SIMULATION" == "tinker" ]; then
	SimNAME="TIN";
fi


#Format the phase if specified
if [ $PHASE != "DefaultPhase" ]; then
	phase="_${PHASE}"
else
	phase=""
fi

#Format the hinge if specified
if [ $hinge != "DefaultHinge" ]; then
	hinge="_$hinge"
else
	hinge=""
fi

#Name the job
export MOLNAME="$MOLECULE"
if [ "$SIMULATION" == "gromacs" ]; then
    export JOBNAME="${MOLNAME}_${SimNAME}_${PotNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K${Chargename}${Drudename}${LNAME}${GaNAME}${PNAME}${VNAME}${hinge}"
else
    export JOBNAME="${MOLNAME}_${SimNAME}_${PotNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K${PNAME}${DNAME}${hinge}"
fi
export JOBPATH="../jobs/${JOBNAME}"
export GNAME="pre_EQ"
export TNAME="topology"
export PYTHONSCRIPTPATH="../scripts"

#make the directory if it does not already exist
echo "Making Directory: ${JOBPATH} ..."
mkdir ${JOBPATH}

#OUTPUT FREQUENCY
equil_output_frequency=$(echo "${equil_steps}/${EQOUTPUTS}" | bc)
equil_trr_output_frequency=$(echo "${equil_steps}/${EMTRROUTPUTS}" | bc)
prod_output_frequency=$(echo "${prod_steps}/${PRODOUTPUTS}" | bc)
prod_trr_output_frequency=$(echo "${prod_steps}/${PRODTRROUTPUTS}" | bc)
anneal_output_frequency=$(echo "${anneal_steps}/${ANNEALOUTPUTS}" | bc)
anneal_trr_output_frequency=$(echo "${anneal_steps}/${ANNEALTRROUTPUTS}" | bc)

if [ "$SIMULATION" == "gromacs" ]; then

	#COPY OVER THE INITIAL GRO FILE
        echo "Copying .gro file..."
        #echo "${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${PRESSURE}bar_${PotNAME}${hinge}.gro ${JOBPATH}/${GNAME}.gro"
        if [ ${polymorph_num}  == "gas" ]; then
		cp ${TEMPLATEPATH}/${MOLNAME}_gas_1.gro ${JOBPATH}/${GNAME}.gro
        #If this is an initial equilibration job, use the original polymorph structure
        #elif [ "$hinge" == "_NPT1" ]; then
        #        if [ -f "${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_000K_${PotNAME}.gro" ]; then
        #                cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_000K_${PotNAME}.gro ${JOBPATH}/${GNAME}.gro
        #                grofile="${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_000K_${PotNAME}"
        #        else
        #                cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}.gro ${JOBPATH}/${GNAME}.gro
        #                grofile="${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}"
        #        fi
        else
                if [ -f "${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}.gro" ]; then
                        cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}.gro ${JOBPATH}/${GNAME}.gro
                        grofile="${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}"
		elif [ -f "${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K_1bar_${PotNAME}.gro" ]; then
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K_1bar_${PotNAME}.gro ${JOBPATH}/${GNAME}.gro
                        grofile="${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${TEMPNAME}K_1bar_${PotNAME}"
                elif [ -f "${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_000K_${PotNAME}.gro" ]; then
                        cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_000K_${PotNAME}.gro ${JOBPATH}/${GNAME}.gro
                        grofile="${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_000K_${PotNAME}"
                else
                        cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}.gro ${JOBPATH}/${GNAME}.gro
                        grofile="${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}"
                fi
                #scale the box vectors if necessary
                #Determine the current volume of the unit cell
                if [ "$VOLUME" != "-1" ]; then
                        vol=$(echo "$VOLUME*0.01" | bc)
                        echo "Resizing to $vol..."
                        if [ "$polymorph_num" == "p3" ]; then
                                python ${PYTHONSCRIPTPATH}/resize_gro_individual.py -f ${JOBPATH}/${GNAME}.gro -V $vol -M ${MOLNAME} -n 12 -u 2
                        else
                                python ${PYTHONSCRIPTPATH}/resize_gro_individual.py -f ${JOBPATH}/${GNAME}.gro -V $vol -M ${MOLNAME} -n 12 -u 4
                        fi
                fi
        fi
	echo "Using initial structure: $grofile"

        #COPY OVER THE RESTRAINT GRO FILE
        echo "Copying restraint file..."
        #echo "${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLNUM}_${PRESSURE}bar_${PotNAME}${hinge}_restraint.gro"
        #exit 1
        if [ ${polymorph_num}  == "gas" ]; then
		cp ${TEMPLATEPATH}/${MOLNAME}_gas_1.gro ${JOBPATH}/restraint.gro
        else
                if [ -f "${grofile}_restraint.gro" ]; then
                        cp ${grofile}_restraint.gro ${JOBPATH}/restraint.gro
                else
			cp ${grofile}.gro ${JOBPATH}/restraint.gro
                fi
        fi


	#Copy the template equilibration and production mdp file in to the new directory
	echo "Copying .mdp files..."
	if [ ${polymorph_num}  == "gas" ]; then
	    cp ${TEMPLATEPATH}/equilibration_gas.mdp ${JOBPATH}/equilibration.mdp
	    cp ${TEMPLATEPATH}/production_gas.mdp ${JOBPATH}/production.mdp
	    cp ${TEMPLATEPATH}/minimization.mdp ${JOBPATH}/minimization.mdp
            cp ${TEMPLATEPATH}/relaxation.mdp ${JOBPATH}/relaxation.mdp
	    cp ${TEMPLATEPATH}/anneal_gas.mdp ${JOBPATH}/anneal.mdp
	else
	    cp ${TEMPLATEPATH}/equilibration.mdp ${JOBPATH}/equilibration.mdp
	    cp ${TEMPLATEPATH}/production.mdp ${JOBPATH}/production.mdp
	    cp ${TEMPLATEPATH}/minimization.mdp ${JOBPATH}/minimization.mdp
	    cp ${TEMPLATEPATH}/relaxation.mdp ${JOBPATH}/relaxation.mdp
	    cp ${TEMPLATEPATH}/anneal.mdp ${JOBPATH}/anneal.mdp
	fi
	sed -i "s/MOLMOLMOLMOL/$MOLECULE/g" ${JOBPATH}/minimization.mdp
        sed -i "s/MOLMOLMOLMOL/$MOLECULE/g" ${JOBPATH}/relaxation.mdp
	sed -i "s/MOLMOLMOLMOL/$MOLECULE/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/MOLMOLMOLMOL/$MOLECULE/g" ${JOBPATH}/production.mdp
	sed -i "s/MOLMOLMOLMOL/$MOLECULE/g" ${JOBPATH}/anneal.mdp

	echo "Editing .mdp files..."

	#make any necessary adjustments to the mdp file
	#if [ "$integrator" == "sd" ]; then
        #    sed -i 's/comm-mode                = Linear/comm-mode                = None/g' ${JOBPATH}/equilibration.mdp
        #    sed -i 's/comm-mode                = Linear/comm-mode                = None/g' ${JOBPATH}/production.mdp
	#fi

	#TEMPERATURE COUPLING
	if [ "$ENSEMBLE" == "NVT" ] || [ "$ENSEMBLE" == "NPT" ]; then
	    sed -i "s/tcoupl                   = v-rescale/tcoupl                   = ${thermostat}/g" ${JOBPATH}/equilibration.mdp
            sed -i "s/tcoupl                   = v-rescale/tcoupl                   = ${thermostat}/g" ${JOBPATH}/production.mdp
	    sed -i "s/tcoupl                   = v-rescale/tcoupl                   = ${thermostat}/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/ref_t.*/ref_t                    = ${TEMP}/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/ref_t.*/ref_t                    = ${TEMP}/g" ${JOBPATH}/production.mdp
	    sed -i "s/ref_t.*/ref_t                    = ${TEMP}/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/gen_temp.*/gen_temp                 = ${TEMP}/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/gen_temp.*/gen_temp                 = ${TEMP}/g" ${JOBPATH}/production.mdp
	    sed -i "s/gen_temp.*/gen_temp                 = ${TEMP}/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/STARTTEMP/${TEMP}/g" ${JOBPATH}/anneal.mdp

	fi


	#PRESSURE COUPLING
	if [ "$ENSEMBLE" == "NPT" ]; then
	    sed -i "s/pcoupl                   = no/pcoupl                   = berendsen/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/pcoupl                   = no/pcoupl                   = ${barostat}/g" ${JOBPATH}/production.mdp
	    sed -i "s/pcoupl                   = no/pcoupl                   = berendsen/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/ref_p.*/ref_p                    = ${PRESSURE} ${PRESSURE} ${PRESSURE} 0.0 0.0 0.0/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/ref_p.*/ref_p                    = ${PRESSURE} ${PRESSURE} ${PRESSURE} 0.0 0.0 0.0/g" ${JOBPATH}/production.mdp
	    sed -i "s/ref_p.*/ref_p                    = ${PRESSURE} ${PRESSURE} ${PRESSURE} 0.0 0.0 0.0/g" ${JOBPATH}/anneal.mdp
	    #If we are simply interested in getting to the average volume at a new pressure, use a fast time constant
	    if [ "$barostat" == "berendsen" ]; then
		#case $polymorph_num in
		#p1 )
		    sed -i "s/tau_p.*/tau_p                    = 1.0/g" ${JOBPATH}/equilibration.mdp
                    sed -i "s/tau_p.*/tau_p                    = 10.0/g" ${JOBPATH}/production.mdp
		    #;;
		#p2 )
		#    sed -i "s/tau_p.*/tau_p                    = 1.0/g" ${JOBPATH}/equilibration.mdp
                #    sed -i "s/tau_p.*/tau_p                    = 10.0/g" ${JOBPATH}/production.mdp
		#    ;;
		#p3 )
		#    sed -i "s/tau_p.*/tau_p                    = 1.0/g" ${JOBPATH}/equilibration.mdp
                #    sed -i "s/tau_p.*/tau_p                    = 10.0/g" ${JOBPATH}/production.mdp 
		#    ;;
		#esac
	    fi
	    #If this polymorph is not rectangular, change the compressibility to allow Beta to change
	    string=$(less ${JOBPATH}/${GNAME}.gro | tail -1 | awk '{print $9}')
	    if [ "$string" != "" ]; then
	        sed -i "s/4.5e-5 4.5e-5 4.5e-5 0 0 0/4.5e-5 4.5e-5 4.5e-5 4.5e-5 4.5e-5 4.5e-5/g" ${JOBPATH}/equilibration.mdp
	        sed -i "s/4.5e-5 4.5e-5 4.5e-5 0 0 0/4.5e-5 4.5e-5 4.5e-5 4.5e-5 4.5e-5 4.5e-5/g" ${JOBPATH}/production.mdp
		sed -i "s/4.5e-5 4.5e-5 4.5e-5 0 0 0/4.5e-5 4.5e-5 4.5e-5 4.5e-5 4.5e-5 4.5e-5/g" ${JOBPATH}/anneal.mdp
	    fi 
	    ##If this is an initial equilibration job, use anisotropic pressure equilibration
	    #if [ "$hinge" == "_NPT1" ]; then
	    #    sed -i "s/pcoupltype               = isotropic/;pcoupltype               = isotropic/g" ${JOBPATH}/equilibration.mdp
	    #    sed -i "s/pcoupltype               = isotropic/;pcoupltype               = isotropic/g" ${JOBPATH}/production.mdp
	    #    sed -i "s/;pcoupltype               = anisotropic/pcoupltype               = anisotropic/g" ${JOBPATH}/equilibration.mdp
	    #    sed -i "s/;pcoupltype               = anisotropic/pcoupltype               = anisotropic/g" ${JOBPATH}/production.mdp
	    #fi 

	    ##If this is the designed potential, use isotropic pressure equilibration
	    #if [ "$POTENTIAL" == "designeda" ]; then
	    #    sed -i "s/;pcoupltype               = isotropic/pcoupltype               = isotropic/g" ${JOBPATH}/equilibration.mdp
            #    sed -i "s/;pcoupltype               = isotropic/pcoupltype               = isotropic/g" ${JOBPATH}/production.mdp
            #    sed -i "s/pcoupltype               = anisotropic/;pcoupltype               = anisotropic/g" ${JOBPATH}/equilibration.mdp
            #    sed -i "s/pcoupltype               = anisotropic/;pcoupltype               = anisotropic/g" ${JOBPATH}/production.mdp
   	    #fi
	fi

	#CUTOFF RADIUS
	if [ "$CUTOFF" != "9" ]; then
	    coulombswitch=$(echo "$CUTOFF*0.1 - 0.02" | bc)
	    rcoulomb=$(echo "$CUTOFF*0.1" | bc)
	    vdwswitch=$(echo "$CUTOFF*0.1 - 0.05" | bc)
	    rvdw=$(echo "$CUTOFF*0.1" | bc)
	    sed -i "s/rcoulomb-switch          =.*/rcoulomb-switch          = $coulombswitch/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/rcoulomb-switch          =.*/rcoulomb-switch          = $coulombswitch/g" ${JOBPATH}/production.mdp
	    sed -i "s/rcoulomb-switch          =.*/rcoulomb-switch          = $coulombswitch/g" ${JOBPATH}/minimization.mdp
	    sed -i "s/rcoulomb-switch          =.*/rcoulomb-switch          = $coulombswitch/g" ${JOBPATH}/relaxation.mdp
	    sed -i "s/rcoulomb-switch          =.*/rcoulomb-switch          = $coulombswitch/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/rcoulomb                 =.*/rcoulomb                 = $rcoulomb/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/rcoulomb                 =.*/rcoulomb                 = $rcoulomb/g" ${JOBPATH}/production.mdp
	    sed -i "s/rcoulomb                 =.*/rcoulomb                 = $rcoulomb/g" ${JOBPATH}/minimization.mdp
	    sed -i "s/rcoulomb                 =.*/rcoulomb                 = $rcoulomb/g" ${JOBPATH}/relaxation.mdp
	    sed -i "s/rcoulomb                 =.*/rcoulomb                 = $rcoulomb/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/rvdw-switch              =.*/rvdw-switch              = $vdwswitch/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/rvdw-switch              =.*/rvdw-switch              = $vdwswitch/g" ${JOBPATH}/production.mdp
	    sed -i "s/rvdw-switch              =.*/rvdw-switch              = $vdwswitch/g" ${JOBPATH}/minimization.mdp
	    sed -i "s/rvdw-switch              =.*/rvdw-switch              = $vdwswitch/g" ${JOBPATH}/relaxation.mdp
	    sed -i "s/rvdw-switch              =.*/rvdw-switch              = $vdwswitch/g" ${JOBPATH}/anneal.mdp
	    sed -i "s/rvdw                     =.*/rvdw                     = $rvdw/g" ${JOBPATH}/equilibration.mdp
	    sed -i "s/rvdw                     =.*/rvdw                     = $rvdw/g" ${JOBPATH}/production.mdp
	    sed -i "s/rvdw                     =.*/rvdw                     = $rvdw/g" ${JOBPATH}/minimization.mdp
	    sed -i "s/rvdw                     =.*/rvdw                     = $rvdw/g" ${JOBPATH}/relaxation.mdp
	    sed -i "s/rvdw                     =.*/rvdw                     = $rvdw/g" ${JOBPATH}/anneal.mdp
	    if [ "$CUTOFF" -gt "10" ]; then
	    	sed -i "s/rlist                    =.*/rlist                    = $rvdw/g" ${JOBPATH}/equilibration.mdp
            	sed -i "s/rlist                    =.*/rlist                    = $rvdw/g" ${JOBPATH}/production.mdp
            	sed -i "s/rlist                    =.*/rlist                    = $rvdw/g" ${JOBPATH}/minimization.mdp
            	sed -i "s/rlist                    =.*/rlist                    = $rvdw/g" ${JOBPATH}/relaxation.mdp
            	sed -i "s/rlist                    =.*/rlist                    = $rvdw/g" ${JOBPATH}/anneal.mdp
	    fi

	fi

	#EQUILIBRATION/PRODUCTION TIMESTEPS
	sed -i "s/nsteps.*/nsteps                   = ${equil_steps}/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/nsteps.*/nsteps                   = ${prod_steps}/g" ${JOBPATH}/production.mdp
	sed -i "s/nsteps.*/nsteps                   = ${anneal_steps}/g" ${JOBPATH}/anneal.mdp

	#OUTPUT FREQUENCY
	sed -i "s/nstlog                   =.*/nstlog                   = ${equil_output_frequency}/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/nstenergy                =.*/nstenergy                = ${equil_output_frequency}/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/nstxout               .*/nstxout                  = ${equil_trr_output_frequency}/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/nstxout-compressed       =.*/nstxout-compressed       = ${equil_trr_output_frequency}/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/nstlog                   =.*/nstlog                   = ${prod_output_frequency}/g" ${JOBPATH}/production.mdp
	sed -i "s/nstenergy                =.*/nstenergy                = ${prod_output_frequency}/g" ${JOBPATH}/production.mdp
	sed -i "s/nstxout               .*/nstxout                  = ${prod_trr_output_frequency}/g" ${JOBPATH}/production.mdp
	sed -i "s/nstxout-compressed       =.*/nstxout-compressed       = ${prod_trr_output_frequency}/g" ${JOBPATH}/production.mdp
	sed -i "s/nstlog                   =.*/nstlog                   = ${prod_output_frequency}/g" ${JOBPATH}/anneal.mdp
        sed -i "s/nstenergy                =.*/nstenergy                = ${prod_output_frequency}/g" ${JOBPATH}/anneal.mdp
        sed -i "s/nstxout               .*/nstxout                  = ${prod_trr_output_frequency}/g" ${JOBPATH}/anneal.mdp
        sed -i "s/nstxout-compressed       =.*/nstxout-compressed       = ${prod_trr_output_frequency}/g" ${JOBPATH}/anneal.mdp

	#INTEGRATOR
	sed -i "s/integrator.*/integrator               = ${integrator}/g" ${JOBPATH}/equilibration.mdp
	sed -i "s/integrator.*/integrator               = ${integrator}/g" ${JOBPATH}/production.mdp
	sed -i "s/integrator.*/integrator               = ${integrator}/g" ${JOBPATH}/anneal.mdp

	#FREE ENERGY PARAMETERS
	setup_mdpLambdas -L $Lambda -W $MINLAMBDA -S $MAXLAMBDA -s $LSPACING -A $MAXGAMMA -B $MINGAMMA -G $GAMMA -g $GSPACING -f $EXPONENT -d $JOBPATH

	#Copy over the molecule itp file and make the necessary modifications to the bond lengths, charges, and sigma values
	echo "Copying itp file..."
	cp ${TEMPLATEPATH}/${MOLNAME}_${POTENTIAL}.itp ${JOBPATH}/molecule.itp
	
	#Conduct any interpolations in the itp file
	if [ "$POTENTIAL" == "oplsaatofakeg" ] || [ "$POTENTIAL" == "oplsaatofakea" ]; then
	    python ${SCRIPT_LOC}/interpolate_itp.py -f ${JOBPATH}/molecule.itp -d $DELTA 
	fi

	cp ${TEMPLATEPATH}/parameters.txt ${JOBPATH}/parameters.txt
	snippet=$(echo "$POTENTIAL" | cut -c1-11)
	if [ "$POTENTIAL" == "oplsaa" ]; then
	    sed -i "s/CCCCC/0.140/g" ${JOBPATH}/parameters.txt
	    sed -i "s/HHHHH/0.108/g" ${JOBPATH}/parameters.txt
	elif [ "$POTENTIAL" == "gromos" ]; then
	    sed -i "s/CCCCC/0.139/g" ${JOBPATH}/parameters.txt
            sed -i "s/HHHHH/0.109/g" ${JOBPATH}/parameters.txt
	elif [ "$POTENTIAL" == "drude" ]; then
            sed -i "s/CCCCC/0.1375/g" ${JOBPATH}/parameters.txt
            sed -i "s/HHHHH/0.108/g" ${JOBPATH}/parameters.txt
	    drude_k_strength=$(echo "scale=8;${drude_k}*4184;" | bc | sed -r 's/^(-?)\./\10./')
	    sed -i "s/drude_k/$drude_k_strength/g" ${JOBPATH}/molecule.itp
	elif [ "$snippet" == "oplsaafakeg" ]; then
	    sed -i "s/CCCCC/0.139/g" ${JOBPATH}/parameters.txt
            sed -i "s/HHHHH/0.109/g" ${JOBPATH}/parameters.txt
	elif [ "$snippet" == "oplsaafakegb" ]; then
            sed -i "s/CCCCC/0.139/g" ${JOBPATH}/parameters.txt
            sed -i "s/HHHHH/0.109/g" ${JOBPATH}/parameters.txt
	elif [ "$snippet" == "oplsaafakegd" ]; then
            sed -i "s/CCCCC/0.140/g" ${JOBPATH}/parameters.txt
            sed -i "s/HHHHH/0.108/g" ${JOBPATH}/parameters.txt
	elif [ "$snippet" == "oplsaafakea" ]; then
            sed -i "s/CCCCC/0.1382/g" ${JOBPATH}/parameters.txt
            sed -i "s/HHHHH/0.1079/g" ${JOBPATH}/parameters.txt
	fi
	if [ "$CHARGE" != "" ]; then
	   sed -i "s/-0.115    12.011/-${CHARGE}    12.011/g" ${JOBPATH}/molecule.itp
	   sed -i "s/0.115     1.008/${CHARGE}     1.008/g" ${JOBPATH}/molecule.itp
	fi
	sed -i "s/CCCHARGE/$CHARGE/g" ${JOBPATH}/parameters.txt
	#sed -i "s/opls_145/opls_C${SigmaC}/g" ${JOBPATH}/molecule.itp
        #sed -i "s/opls_146/opls_H${SigmaH}/g" ${JOBPATH}/molecule.itp

	#cp ${TEMPLATEPATH}/molecule.itp ${JOBPATH}/molecule.itp

	#CREATE THE POSITION RESTRAINT ITP FILE
	echo "0 0" | genrestr_d -f ${JOBPATH}/${GNAME}.gro -o ${JOBPATH}/posre.itp -fc $k_max $k_max $k_max -quiet >> /dev/null 
	
	##Now lop off all but the first apermol + 4 lines
	atoms=$(wc -l ${JOBPATH}/${GNAME}.gro | awk '{print $1}')
	#echo "atoms: $atoms"
	apermol=$(echo "($atoms-3)/${MOLECULES}" | bc)
	#echo "apermol: $apermol"
	apermol=$(echo "$apermol+4" | bc)
	head -${apermol} ${JOBPATH}/posre.itp > ${JOBPATH}/restr.itp

	#COPY OVER THE INDEX FILE(for the force-averaging code)
	if [ "$MOLECULES" == "$INDEPENDENT" ]; then
        	cp $TEMPLATEPATH/index.ndx ${JOBPATH}/index.ndx
		
	else
		cp $TEMPLATEPATH/${MOLNAME}_${polymorph_num}_${MOLNUM}.ndx ${JOBPATH}/index.ndx
		sed -i "s/symmetry-averaging       =.*/symmetry-averaging       = yes/g" ${JOBPATH}/equilibration.mdp
		sed -i "s/symmetry-averaging       =.*/symmetry-averaging       = yes/g" ${JOBPATH}/production.mdp
		sed -i "s/symmetry-averaging       =.*/symmetry-averaging       = yes/g" ${JOBPATH}/minimization.mdp
		sed -i "s/symmetry-averaging       =.*/symmetry-averaging       = yes/g" ${JOBPATH}/relaxation.mdp
		#sed -i "s/symmetry-averaging       =.*/symmetry-averaging       = yes/g" ${JOBPATH}/anneal.mdp
		less "${TEMPLATEPATH}/${MOLNAME}_${INDEPENDENT}ind_symmetry_groups.txt" >> ${JOBPATH}/equilibration.mdp
		less "${TEMPLATEPATH}/${MOLNAME}_${INDEPENDENT}ind_symmetry_groups.txt" >> ${JOBPATH}/production.mdp
		less "${TEMPLATEPATH}/${MOLNAME}_${INDEPENDENT}ind_symmetry_groups.txt" >> ${JOBPATH}/minimization.mdp
		less "${TEMPLATEPATH}/${MOLNAME}_${INDEPENDENT}ind_symmetry_groups.txt" >> ${JOBPATH}/relaxation.mdp
		#less "${TEMPLATEPATH}/${MOLNAME}_${INDEPENDENT}ind_symmetry_groups.txt" >> ${JOBPATH}/anneal.mdp

	fi



	#Now edit the position restraint file to indicate a transformation over lambda space (handle all possible spacing cases)
	sed -i "s/$k_max   $k_max   $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max    $k_max    $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max     $k_max     $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max      $k_max      $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max       $k_max       $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max        $k_max        $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max         $k_max         $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp
	sed -i "s/$k_max          $k_max          $k_max/$k_min $k_min $k_min $k_max $k_max $k_max/g" ${JOBPATH}/restr.itp

	rm ${JOBPATH}/posre.itp
	mv ${JOBPATH}/restr.itp ${JOBPATH}/posre.itp

	#COPY OVER THE TOPOLOGY FILE
	echo "Copying topology file..."
	if [ "${polymorph_num}" == "gas" ]; then
		cp ${TEMPLATEPATH}/topology.top ${JOBPATH}/${TNAME}.top
	else
		cp ${TEMPLATEPATH}/topology.top ${JOBPATH}/${TNAME}.top
	fi

	#Edit the topology file based on the potential and system inputs
	sed -i "s/MOLMOLMOL/$MOLECULE/g" ${JOBPATH}/topology.top
	sed -i "s/NUMNUMNUM/${MOLECULES}/g" ${JOBPATH}/topology.top
	
	if [ "$POTENTIAL" == "gromos" ]; then
                sed -i 's/oplsaa.ff/gromos54a7.ff/g' ${JOBPATH}/${TNAME}.top
	elif [ "$POTENTIAL" == "day" ]; then
                #sed -i 's/oplsaa.ff/day.ff/g' ${JOBPATH}/${TNAME}.top
		sed -i '/oplsaa.ff/d' ${JOBPATH}/${TNAME}.top 
	elif [ "$POTENTIAL" == "designedg" ]; then
		sed -i 's/oplsaa.ff/${MOLNAME}_designedg.ff/g' ${JOBPATH}/${TNAME}.top
	elif [ "$POTENTIAL" == "${MOLNAME}_oplsaatodesignedg" ]; then
                sed -i 's/oplsaa.ff/${MOLNAME}_oplsaatodesignedg.ff/g' ${JOBPATH}/${TNAME}.top
	elif [ "$POTENTIAL" == "designeda" ]; then
                sed -i 's/oplsaa.ff/designeda.ff/g' ${JOBPATH}/${TNAME}.top
	elif [ "$POTENTIAL" == "oplsaatodesigneda" ]; then
		sed -i 's/oplsaa.ff/${MOLNAME}_oplsaatodesigneda.ff/g' ${JOBPATH}/${TNAME}.top
	elif [ "$POTENTIAL" == "designedd" ]; then
                sed -i 's/oplsaa.ff/${MOLNAME}_designedd.ff/g' ${JOBPATH}/${TNAME}.top
	elif [ "$POTENTIAL" == "drude" ]; then
                sed -i 's/oplsaa.ff/drude.ff/g' ${JOBPATH}/${TNAME}.top
		#sed -i "s/benzene $MOLECULES/benzene $(($MOLECULES/2+$MOLECULES))/g" ${JOBPATH}/${TNAME}.top
	fi


	#Copy over local and cluster submission scripts
	echo "Copying local and cluster submission scripts..."
	cp ${TEMPLATEPATH}/submit_local.sh ${JOBPATH}/submit_local.sh
	cp ${TEMPLATEPATH}/submit_localitc.sh ${JOBPATH}/submit_localitc.sh
	cp ${TEMPLATEPATH}/submit_localatlas.sh ${JOBPATH}/submit_localatlas.sh
	cp ${TEMPLATEPATH}/submit_cluster.slurm ${JOBPATH}/submit_cluster.slurm
	cp ${TEMPLATEPATH}/submit_cluster_bridges.slurm ${JOBPATH}/submit_cluster_bridges.slurm
	cp ${TEMPLATEPATH}/submit_cluster_atlas.sh ${JOBPATH}/submit_cluster_atlas.sh
	sed -i "s/DIRDIRDIRDIR/${JOBNAME}/g" ${JOBPATH}/submit_cluster.slurm
	cp ${TEMPLATEPATH}/submit_minimization_local.sh ${JOBPATH}/submit_minimization_local.sh
	cp ${TEMPLATEPATH}/submit_minimization.sh ${JOBPATH}/submit_minimization.sh
	cp ${TEMPLATEPATH}/submit_relaxation.sh ${JOBPATH}/submit_relaxation.sh
	cp ${TEMPLATEPATH}/relax_molecule.sh ${JOBPATH}/relax_molecule.sh

	#if the number of equilibration steps is 0, skip the equilibration
        if [ "$equil_steps" == "0" ]; then
                sed -i "/EQUILIBRATION/,+5d" ${JOBPATH}/submit_local.sh
                sed -i "/EQUILIBRATION/,+5d" ${JOBPATH}/submit_localitc.sh
                sed -i "/EQUILIBRATION/,+5d" ${JOBPATH}/submit_cluster.slurm
		sed -i "/EQUILIBRATION/,+5d" ${JOBPATH}/submit_cluster_bridges.slurm
		sed -i "/EQUILIBRATION/,+5d" ${JOBPATH}/submit_cluster_atlas.sh
                cp ${JOBPATH}/pre_EQ.gro ${JOBPATH}/EQ.gro
                echo "Skipping Equilibration..."
        fi	
	
	#If there is no force-averaging, remove the index file command
	if [ "$MOLECULES" == "$INDEPENDENT" ]; then
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_local.sh
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_localitc.sh
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_localatlas.sh
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_cluster_bridges.slurm
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_cluster_atlas.sh
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/relax_molecule.sh
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_minimization_local.sh
	    sed -i "s/-n index.ndx//g" ${JOBPATH}/submit_minimization.sh
	fi
	
	#If we are not using the drude oscillator potential, remove the drude settings from the mdp file
	if [ "$POTENTIAL" != "drude" ]; then
	    sed -i "/DRUDE-SPECIFIC SETTINGS/,+6d" ${JOBPATH}/equilibration.mdp
	    sed -i "/DRUDE-SPECIFIC SETTINGS/,+6d" ${JOBPATH}/production.mdp
	    sed -i "/DRUDE-SPECIFIC SETTINGS/,+6d" ${JOBPATH}/anneal.mdp
	else
	    sed -i "s/gromacs_forceavg2/gromacs_drude/g" ${JOBPATH}/submit_local.sh
            sed -i "s/gromacs_forceavg2/gromacs_drude/g" ${JOBPATH}/submit_localitc.sh
            sed -i "s/gromacs_forceavg2/gromacs_drude/g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "s/gromacs_forceavg2/gromacs_drude/g" ${JOBPATH}/submit_cluster_bridges.slurm
	    sed -i "s/gromacs_forceavg2/gromacs_drude/g" ${JOBPATH}/submit_cluster_atlas.sh
            sed -i "s/gromacs_forceavg2/gromacs_drude/g" ${JOBPATH}/submit_minimization.sh
	fi

	#IF WE ARE REWEIGHTING BETWEEN POTENTIALS, SWITCH THE RESTRAINT-LAMBDAS TO DEP-LAMBDAS IN THE MDP FILE	
	if [ "$POTENTIAL" == "oplsaatofakeg" ] || [ "$POTENTIAL" == "oplsaatofakea" ]; then
	    sed -i "s/restraint_lambdas        =/fep-lambdas              =/g" ${JOBPATH}/equilibration.mdp
            sed -i "s/restraint_lambdas        =/fep-lambdas              =/g" ${JOBPATH}/production.mdp
	fi
	
	#IF THIS IS THE PSCP, DONT REWEIGHT, ENERGY MINIMIZE, OR PICK THE AVERAGE CONFIGURATION
	if [[ "$hinge" == *_L* ]] || [[ "$hinge" == *_G* ]]; then
            sed -i "/RELAX THE BENZENES/,+1d" ${JOBPATH}/submit_localitc.sh
            sed -i "/REWEIGHT THE JOB/,+4d" ${JOBPATH}/submit_localitc.sh
	    sed -i "/RELAX THE BENZENES/,+1d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/REWEIGHT THE JOB/,+4d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/REWEIGHT THE JOB/,+4d" ${JOBPATH}/submit_cluster_bridges.slurm
	    sed -i "/REWEIGHT THE JOB/,+4d" ${JOBPATH}/submit_cluster_atlas.sh
	fi
	
	#SET THE APPROPRIATE POST-SIMULATION REWEIGHTING	
	if [ "$POTENTIAL" == "oplsaa" ]; then
            sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"oplsaa\"/g" ${JOBPATH}/submit_cluster.slurm
            sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/reweightjobtinker.*/d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"oplsaa\"/g" ${JOBPATH}/submit_cluster_atlas.sh
            sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster_atlas.sh
            sed -i "/reweightjobtinker.*/d" ${JOBPATH}/submit_cluster_atlas.sh
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"oplsaa\"/g" ${JOBPATH}/submit_cluster_bridges.slurm
            sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster_bridges.slurm
            sed -i "/reweightjobtinker.*/d" ${JOBPATH}/submit_cluster_bridges.slurm
	elif [ "$POTENTIAL" == "designeda" ] || [ "$POTENTIAL" == "oplsaatodesigneda" ]; then
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"designeda\"/g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "s/reweightjobtinker.*/reweightjobtinker -s gromacs -u \"amoeba09todesa\" -d 10/g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"designeda\"/g" ${JOBPATH}/submit_cluster_atlas.sh
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s gromacs -u \"amoeba09todesa\" -d 10/g" ${JOBPATH}/submit_cluster_atlas.sh
            sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster_atlas.sh
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"designeda\"/g" ${JOBPATH}/submit_cluster_bridges.slurm
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s gromacs -u \"amoeba09todesa\" -d 10/g" ${JOBPATH}/submit_cluster_bridges.slurm
            sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster_bridges.slurm
	elif [ "$POTENTIAL" == "designedd" ] || [ "$POTENTIAL" == "drude" ]; then
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"designedd\"/g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/reweightjobtinker -s gromacs/d" ${JOBPATH}/submit_cluster.slurm
	    if [ "$POTENTIAL" == "drude" ]; then
		sed -i "s/reweightjobdrude -s gromacs/reweightjobdrude -s drude/g" ${JOBPATH}/submit_cluster.slurm
	    fi
	elif [ "$POTENTIAL" == "gromos" ] || [ "$POTENTIAL" == "designedg" ]; then
            sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s gromacs -u \"gromos54a7 oplsaa designedg\"/g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/reweightjobdrude.*/d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/convertjobtinker.*/d" ${JOBPATH}/submit_cluster.slurm
	else
	    sed -i "/convertjobtinker/d" ${JOBPATH}/submit_cluster.slurm
	fi

	#IF THIS IS NOT THE OPLS POTENTIAL, DONT FREEZE THE CONFIGURATONS INTO INDIVIDUAL LATTICE MINIMA
	if [ "$POTENTIAL" != "oplsaa" ]; then
	    sed -i "/FREEZE THE JOB/,+1d" ${JOBPATH}/submit_cluster.slurm
	    sed -i "/FREEZE THE JOB/,+1d" ${JOBPATH}/submit_cluster_atlas.sh
	    sed -i "/FREEZE THE JOB/,+1d" ${JOBPATH}/submit_cluster_bridges.slurm
	fi

	#Set the number of threads
	sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_local.sh
	sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_localitc.sh
	sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_cluster_bridges.slurm
	sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_cluster_atlas.sh
	sed -i "s/OMP_NUM_THREADS=.*/OMP_NUM_THREADS=${cores}/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/OMP_NUM_THREADS=.*/OMP_NUM_THREADS=${cores}/g" ${JOBPATH}/submit_cluster_atlas.sh
	sed -i "s/OMP_NUM_THREADS=.*/OMP_NUM_THREADS=${cores}/g" ${JOBPATH}/submit_cluster_bridges.slurm
	sed -i "s/ntasks=1/ntasks=${cores}/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/ntasks=1/ntasks=${cores}/g" ${JOBPATH}/submit_cluster_bridges.slurm
	sed -i "s/ppn=1/ppn=${cores}/g" ${JOBPATH}/submit_cluster_atlas.sh

elif [ "$SIMULATION" == "tinker" ]; then	


	#Copy over the key and xyz file
	if [ "${polymorph_num}" == "gas" ]; then
		cp ${TEMPLATEPATH}/${MOLNAME}_gas_1.key ${JOBPATH}/keyfile.key
		cp ${TEMPLATEPATH}/${MOLNAME}_gas_1.xyz ${JOBPATH}/molecule.xyz
	else
		if [ -f ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}.xyz ]; then
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}.xyz ${JOBPATH}/molecule.xyz
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}.key ${JOBPATH}/keyfile.key
			xyzfile=${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_${PRESSURE}bar_${PotNAME}
		elif [ -f ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_1bar_${PotNAME}.xyz ]; then
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_1bar_${PotNAME}.xyz ${JOBPATH}/molecule.xyz
                        cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_1bar_${PotNAME}.key ${JOBPATH}/keyfile.key
                        xyzfile=${MOLNAME}_${polymorph_num}_${MOLECULES}_${TEMPNAME}K_1bar_${PotNAME}
		elif [ -f ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_000K_${PotNAME}.xyz ]; then
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_000K_${PotNAME}.xyz ${JOBPATH}/molecule.xyz
                        cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_000K_${PotNAME}.key ${JOBPATH}/keyfile.key
			xyzfile=${MOLNAME}_${polymorph_num}_${MOLECULES}_000K_${PotNAME}
		else
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}.xyz ${JOBPATH}/molecule.xyz	
			cp ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}.key ${JOBPATH}/keyfile.key
			xyzfile=${MOLNAME}_${polymorph_num}_${MOLECULES}
		fi
	fi

	#Copy over the restraint file if it exists
	#cp ${TEMPLATEPATH}/${xyzfile}_restraint.xyz ${JOBPATH}/restraint.xyz

	echo "Using initial structure: $xyzfile"
	
	#Modify the key and parameter file to match the potential
	if [ "$POTENTIAL" == "oplsaa"  ] || [ "$POTENTIAL" == "day" ]; then
		sed -i "s/amoeba09.prm/oplsaa.prm/g" ${JOBPATH}/keyfile.key
		addatomtypesindividual -p oplsaa -x ${JOBPATH}/molecule.xyz -M $MOLECULE
	elif [ "$POTENTIAL" == "oplsaafake" ]; then
		sed -i "s/amoeba09.prm/oplsaafake.prm/g" ${JOBPATH}/keyfile.key
		addatomtypesindividual -p oplsaa -x ${JOBPATH}/molecule.xyz -M $MOLECULE
        elif [ "$POTENTIAL" == "amoeba09todesa" ]; then
		cp ${TEMPLATEPATH}/amoeba09todesa.prm ${JOBPATH}/param.prm
		python ${SCRIPT_LOC}/interpolate_itp.py -f ${JOBPATH}/param.prm -d $DELTA
       		sed -i "s/PARAMETERS.*/PARAMETERS param.prm/g" ${JOBPATH}/keyfile.key
		addatomtypesindividual -p amoeba09 -x ${JOBPATH}/molecule.xyz -M $MOLECULE
	#elif [ "$POTENTIAL" == "amoeba09restraint" ]; then
	#	cp ${TEMPLATEPATH}/amoeba09.prm ${JOBPATH}/param.prm
	#	sed -i "s/PARAMETERS.*/PARAMETERS param.prm/g" ${JOBPATH}/keyfile.key
	#	createkeyrestraint -f ${JOBPATH}/restraint.xyz -k ${JOBPATH}/keyfile.key
	#	cp ${JOBPATH}/keyfile.key ${JOBPATH}/restraint.key
	#	python ${SCRIPT_LOC}/interpolate_itp.py -f ${JOBPATH}/keyfile.key -d $DELTA
        #        addatomtypesindividual -p amoeba09 -x ${JOBPATH}/molecule.xyz -M $MOLECULE
	#elif [ "$POTENTIAL" == "amoeba09interactions" ]; then
        #        cp ${TEMPLATEPATH}/amoeba09interactions.prm ${JOBPATH}/param.prm
	#	sed -i "s/PARAMETERS.*/PARAMETERS param.prm/g" ${JOBPATH}/keyfile.key
        #        createkeyrestraint -f ${JOBPATH}/restraint.xyz -k ${JOBPATH}/keyfile.key
	#	python ${SCRIPT_LOC}/interpolate_itp.py -f ${JOBPATH}/param.prm -d $DELTA
	#	python ${SCRIPT_LOC}/interpolate_itp.py -f ${JOBPATH}/keyfile.key -d 1.0
        #        cp ${JOBPATH}/keyfile.key ${JOBPATH}/restraint.key
        #        addatomtypesindividual -p amoeba09 -x ${JOBPATH}/molecule.xyz -M $MOLECULE
	else
		sed -i "s/\/params.*/\/params\/${POTENTIAL}.prm/g" ${JOBPATH}/keyfile.key
		addatomtypesindividual -p amoeba09 -x ${JOBPATH}/molecule.xyz -M $MOLECULE
		#cp ${JOBPATH}/keyfile.key ${JOBPATH}/relax.key
		#sed -i "s/PARAMETERS.*/PARAMETERS relax.prm/g" ${JOBPATH}/relax.key
		#cp ${TEMPLATEPATH}/amoeba09interactions.prm ${JOBPATH}/relax.prm
		#python ${SCRIPT_LOC}/interpolate_itp.py -f ${JOBPATH}/relax.prm -d 0
	fi

	#Copy over the relaxation script
	#cp ${TEMPLATEPATH}/relax_molecule_tinker.sh ${JOBPATH}/relax_molecule.sh


	#Set the apropriate barostat and thermostat in the key file
	#sed -i "s/barostat berendsen/barostat $barostat/g" ${JOBPATH}/keyfile.key
	#sed -i "s/thermostat andersen/thermostat $thermostat/g" ${JOBPATH}/keyfile.key



	
	#X=$(sed -n '4p' molecule.xyz | awk '{print $2}')
	#sed -i "s/XXXX/$X/g" ${JOBPATH}/keyfile.key
	#Y=$(sed -n '4p' molecule.xyz | awk '{print $3}')
	#sed -i "s/YYYY/$Y/g" ${JOBPATH}/keyfile.key
	#Z=$(sed -n '4p' molecule.xyz | awk '{print $4}')
	#sed -i "s/ZZZZ/$Z/g" ${JOBPATH}/keyfile.key
	#alpha=$(sed -n '4p' molecule.xyz | awk '{print $5}')
	#sed -i "s/AAAA/$alpha/g" ${JOBPATH}/keyfile.key
	#beta=$(sed -n '4p' molecule.xyz | awk '{print $6}')
	#sed -i "s/BBBB/$beta/g" ${JOBPATH}/keyfile.key
	#gamma=$(sed -n '4p' molecule.xyz | awk '{print $7}')
	#sed -i "s/GGGG/$gamma/g" ${JOBPATH}/keyfile.key
	
	#Compensate for the slightly cooler TINKER simulations
	#TEMP=$(echo "scale=0;1.1*${TEMP}" | bc | sed -r 's/^(-?)\./\10./')  #FIX


	#Copy over the job specs file
	cp ${TEMPLATEPATH}/job_specs.txt ${JOBPATH}/job_specs.txt
	sed -i "s/SSSS/$prod_steps/g" ${JOBPATH}/job_specs.txt
	sed -i "s/dtdt/0.5/g" ${JOBPATH}/job_specs.txt
	output_frac=$(echo "scale=8;x=1.0/${prod_output_frequency}; if(x<1) print 0; x" | bc)
	output_dt=$(echo "scale=4;x=${prod_output_frequency}*0.5*0.001; if(x<1) print 0; x" | bc)
	sed -i "s/XXXX/${output_dt}/g" ${JOBPATH}/job_specs.txt
	sed -i "s/TTTT/$TEMP/g" ${JOBPATH}/job_specs.txt
	if [ $ENSEMBLE == "NPT" ]; then
	    sed -i "s/EEEE/4   /g" ${JOBPATH}/job_specs.txt
	    sed -i "s/(NVT)/(NPT)/g" ${JOBPATH}/job_specs.txt
	    sed -i "s/PPPP/$PRESSURE/g" ${JOBPATH}/job_specs.txt
	else
	    sed -i "s/EEEE/2   /g" ${JOBPATH}/job_specs.txt
            sed -i "s/PPPP//g" ${JOBPATH}/job_specs.txt
	fi

	#Add on the relevant supercell expansions to make the gromacs supercell
	less ${TEMPLATEPATH}/${MOLNAME}_${polymorph_num}_${MOLECULES}_expansion.txt >> ${JOBPATH}/job_specs.txt


	#Copy over local and cluster submission scripts
	echo "Copying local and cluster submission scripts..."
        cp ${TEMPLATEPATH}/submit_localitc_tinker.sh ${JOBPATH}/submit_localitc.sh
        cp ${TEMPLATEPATH}/submit_cluster_tinker.slurm ${JOBPATH}/submit_cluster.slurm

	#Modify the local and cluster submission scripts
	sed -i "s/SSSS/$prod_steps/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/SSSS/$prod_steps/g" ${JOBPATH}/submit_localitc.sh
        sed -i "s/dtdt/0.5/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/dtdt/0.5/g" ${JOBPATH}/submit_localitc.sh
        output_dt=$(echo "scale=4;x=${prod_output_frequency}*0.5*0.001; if(x<1) print 0; x" | bc)
        sed -i "s/XXXX/${output_dt}/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/XXXX/${output_dt}/g" ${JOBPATH}/submit_localitc.sh
        sed -i "s/TTTT/$TEMP/g" ${JOBPATH}/submit_cluster.slurm
	sed -i "s/TTTT/$TEMP/g" ${JOBPATH}/submit_localitc.sh
	if [ $ENSEMBLE == "NPT" ]; then
	    sed -i "s/EEEE/4   /g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/EEEE/4   /g" ${JOBPATH}/submit_localitc.sh
	    sed -i "s/PPPP/$PRESSURE/g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/PPPP/$PRESSURE/g" ${JOBPATH}/submit_localitc.sh
	else
	    sed -i "s/EEEE/2   /g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/EEEE/2   /g" ${JOBPATH}/submit_localitc.sh
            sed -i "s/PPPP//g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/PPPP//g" ${JOBPATH}/submit_localitc.sh
	fi

	#Handle any special exceptions for the interpolated potential
	if [ "$POTENTIAL" == "amoeba09todesa" ]; then
	    sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u amoeba09todesa -d 10/g" ${JOBPATH}/submit_cluster.slurm
	    sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u amoeba09todesa -d 10/g" ${JOBPATH}/submit_localitc.sh
	elif [ "$POTENTIAL" == "amoeba09restraint" ]; then
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u amoeba09 -d 10 -e 1/g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u amoeba09 -d 10 -e 1/g" ${JOBPATH}/submit_localitc.sh
	elif [ "$POTENTIAL" == "amoeba09interactions" ]; then
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u amoeba09interactions -d 10 -e 1/g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u amoeba09interactions -d 10 -e 1/g" ${JOBPATH}/submit_localitc.sh
	elif [ "$POTENTIAL" == "oplsaa" ]; then
	    sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s tinker -u oplsaa/g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/reweightjobgromacs.*/reweightjobgromacs -s tinker -u oplsaa/g" ${JOBPATH}/submit_localitc.sh
	    sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u oplsaa/g" ${JOBPATH}/submit_cluster.slurm
            sed -i "s/reweightjobtinker.*/reweightjobtinker -s tinker -u oplsaa/g" ${JOBPATH}/submit_localitc.sh
	fi
	

	#Set the number of threads
        sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_localitc.sh
        sed -i "s/-nt 1/-nt ${cores}/g" ${JOBPATH}/submit_cluster.slurm
        sed -i "s/ntasks=1/ntasks=${cores}/g" ${JOBPATH}/submit_cluster.slurm


fi

echo "Create the job status file"
echo "UNSUBMITTED" > ${JOBPATH}/jobstatus.txt

echo "Creating .initial directory"
mkdir ${JOBPATH}/.initial
for file in $(ls ${JOBPATH}); do
    cp ${JOBPATH}/$file ${JOBPATH}/.initial/$file
done

echo "Done!"

