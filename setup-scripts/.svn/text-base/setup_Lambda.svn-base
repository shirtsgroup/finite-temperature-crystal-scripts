#!/bin/bash

#BASH SCRIPT TO AUTOMATICALLY SET UP BENZENE MD SIMULATIONS OVER A GIVEN POSITION RESTRAINT LAMBDA RANGE
#By: Eric Dybeck 09/12/2014
#param n - polymorph number (all 3 will be used if none is given)
#param U - unrestrained lambda value (%)
#param R - restrained lambda value (%)
#param L - incremental lambda change
#param f - functional form (exponent) of the spacing between the lambdas
#param G - Gamma value for the intermolecular interactions (%)
#param T - Temperature in K
#param P - Pressure in bar
#param N - Number of benzene molecules
#param I - Number of independent benzene molecules (the remainder will be averaged)
#param e - Number of steps in the equilibration step
#param p - Number of steps in the production step
#param i - Integrator
#param t - Thermostat
#param b - Barostat
#param k - maximum harmonic restraint constant
#param r - vdw/coulomb cutoff distance (in angstroms)
#param u - potential to be used in the simulation
#param h - optional string hinge to add to the job

#=============================================================================================
# SETUP DEFAULT VALUES AND READ IN PARAMETERS FROM USER
#=============================================================================================

SETRUN_ARGS="$@"
polymorph_num="all"
MINLAMBDA=0
MAXLAMBDA=100
LSPACING=10
EXPONENT=2
GAMMA=100
TEMP=200
PRESSURE=1
MOLECULES=72
INDEPENDENT=72
equil_steps=100000
prod_steps=10000000
integrator="md-vv"
thermostat="v-rescale"
barostat=-1
k_max=1000
Lambda=0
CUTOFF="6"
POTENTIAL="oplsaa"
hinge="DefaultHinge"

#options passed in from the users
while getopts "n:U:R:l:f:G:T:P:N:I:e:p:i:t:b:k:r:u:h:" opt; do
        case $opt in
        n )
                polymorph_num=$OPTARG
                ;;
        U )
                MINLAMBDA=$OPTARG
                ;;
	R )
		MAXLAMBDA=$OPTARG
		;;
	l )
		LSPACING=$OPTARG
		;;
	f )
		EXPONENT=$OPTARG
		;;
	G )
		GAMMA=$OPTARG
		;;
	T )
		TEMP=$OPTARG
		;;
        P )
                PRESSURE=$OPTARG
                ;;
        N )
                MOLECULES=$OPTARG
                ;;
	I )
                INDEPENDENT=$OPTARG
                ;;
        e )
                equil_steps=$OPTARG
                ;;
        p )
                prod_steps=$OPTARG
                ;;
        i )
                integrator=$OPTARG
                ;;
        t )
                thermostat=$OPTARG
                ;;
        b )
                barostat=$OPTARG
                ;;
	k )
                k_max=$OPTARG
                ;;
	r )
                CUTOFF=$OPTARG
                ;;
	u )
                POTENTIAL=$OPTARG
                ;;
        h )
                hinge=$OPTARG
                ;;
        esac
done

#=============================================================================================
# ENSURE THAT INPUTS HAVE BEEN PROPERLY ENTERED
#=============================================================================================

#TEMPERATURE
if [ $TEMP == -1 ]; then
	echo "Invalid Temperature: $Temp"
	exit 1
fi

#POLYMORPH NUMBER
if [ $polymorph_num != "p1" ] && [ $polymorph_num != "p2" ] && [ $polymorph_num != "p3" ] && [ $polymorph_num != "all" ]; then
        echo "Unrecognized polymorph Number: $polymorph_num"
        exit 1
fi

#LAMBDA
if [ "$MINLAMBDA" -lt "0" ] || [ "$MAXLAMBDA" -gt "100" ] || [ "$MINLAMBDA" -gt "$MAXLAMBDA" ]; then
	echo "Minimum Lambda: $MINLAMBDA"
	echo "Maximum Lambda: $MAXLAMBDA"
	echo "Is not a valid lambda range!"	
	exit 1
fi 

if [ "$LSPACING" -le "0" ]; then
	echo "Invalid Lambda Spacing: $LSPACING"
	exit 1
fi

if [ "$EXPONENT" -lt "1" ] || [ "$EXPONENT" -gt "4" ]; then
	echo "Invalid Exponent: $EXPONENT"
	exit 1
fi

#GAMMA POINT
if [ $GAMMA -lt 0 ] || [ $GAMMA -gt 100 ]; then
        echo "Invalid Gamma point: $GAMMA"
        exit 1
fi

#NUMBER OF MOLECULES (currently only 72, 108, 256 is accepted)
if [ $MOLECULES != 256 ] && [ $MOLECULES != 108 ] && [ $MOLECULES != 72 ]; then
        echo "Unsupported number of molecules: $MOLECULES"
        exit 1
fi

#NUMBER OF INDEPENDENT MOLECULES (currently only 4, 8, 16, 32, 72, 108, 256 is accepted)
if [ $INDEPENDENT != 256 ] && [ $INDEPENDENT != 108 ] && [ $INDEPENDENT != 72 ] && [ $INDEPENDENT != 32 ] && [ $INDEPENDENT != 16 ] && [ $INDEPENDENT != 8 ] && [ $INDEPENDENT != 4 ] && [ $INDEPENDENT != 2 ]; then
        echo "Unsupported number of independent molecules: $INDEPENDENT"
        exit 1
elif [ "$MOLECULES" -lt "$INDEPENDENT" ]; then
        echo "Number of total molecules is less than the number of independent molecules!"
        echo "Total Molecules: $MOLECULES"
        echo "Independent Molecules: $INDEPENDENT"
        exit 1
fi

#NUMBER OF EQUILIBRATION TIMESTEPS
#if [ N != 256 ]
#        echo "Unsupported number of molecules: $MOLECULES"
#        exit 1
#fi

#NUMBER OF PRODUCTION TIMESTEPS
#if [ MOLECULES != 256 ]
#        echo "Unsupported number of molecules: $MOLECULES"
#        exit 1
#fi

#INTEGRATOR
if [ $integrator != "md" ] && [ $integrator != "md-vv" ]; then
        echo "Unrecognized integrator: $integrator"
        exit 1
fi

#SPRING CONSTANT
if [ $k_max -lt 0 ]; then
        echo "Invalid spring constant: $k_max"
        exit 1
fi

#CUTOFF RADIUS
if [ "$CUTOFF" -lt "0" ]; then
        echo "Invalid Cutoff Radius: $CUTOFF"
        exit 1
fi

#POTENTIAL
if [ "$POTENTIAL" != "oplsaa" ] && [ "$POTENTIAL" != "oplsaafake" ] && [ "$POTENTIAL" != "amoeba09" ] && [ "$POTENTIAL" != "gromos" ]; then
        echo "Invalid Potential: $POTENTIAL"
        echo "Supported Potentials: oplsaa oplsaafake amoeba09 gromos"
        exit 1
fi

#HINGE
if [ "$hinge" == "DefaultHinge" ]; then
    hinge="L"
else
    hinge="L_$hinge"
fi

#=============================================================================================
# SETUP HARMONIC RESTRAINT PATH
#=============================================================================================

Lambda=$MINLAMBDA
while [ "$Lambda" -lt "$MAXLAMBDA" ]; do
	#Lambda=$(echo "($RawLambda^$EXPONENT) / ($MAXLAMBDA^($EXPONENT-1))" | bc)
	if [ $polymorph_num == "p1" ]; then
		setup_benzene -n p1 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $Lambda -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL-h $hinge
	elif [ $polymorph_num == "p2" ]; then
		setup_benzene -n p2 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $Lambda -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
	elif [ $polymorph_num == "p3" ]; then
		setup_benzene -n p3 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $Lambda -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
	else
		setup_benzene -n p1 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $Lambda -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
		setup_benzene -n p2 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $Lambda -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
		setup_benzene -n p3 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $Lambda -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
	fi
	#let "RawLambda=$RawLambda+$LSPACING"
	let "Lambda=$Lambda+$LSPACING"
done

#Catch the final Lambda off-by-one exception
if [ $polymorph_num == "p1" ]; then
	setup_benzene -n p1 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $MAXLAMBDA -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
elif [ $polymorph_num == "p2" ]; then
        setup_benzene -n p2 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $MAXLAMBDA -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
elif [ $polymorph_num == "p3" ]; then
        setup_benzene -n p3 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $MAXLAMBDA -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
else
        setup_benzene -n p1 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $MAXLAMBDA -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
        setup_benzene -n p2 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $MAXLAMBDA -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
        setup_benzene -n p3 -T $TEMP -P $PRESSURE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -k $k_max -U $MINLAMBDA -R $MAXLAMBDA -s $LSPACING -f $EXPONENT -L $MAXLAMBDA -A $GAMMA -B $GAMMA -G $GAMMA -r $CUTOFF -u $POTENTIAL -h $hinge
fi

