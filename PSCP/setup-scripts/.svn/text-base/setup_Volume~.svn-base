#!/bin/bash

#BASH SCRIPT TO AUTOMATICALLY SET UP BENZENE MD SIMULATIONS OVER A GIVEN VOLUME RANGE
#By: Eric Dybeck 10/07/2014
#param n - polymorph number (all 3 will be used if none is given)
#param S - smallest box vector scaling parameter
#param B - biggest box vector scaling parameter
#param s - spacing between the scaling parameters
#param T - Temperature
#param P - Pressure in ???
#param N - Number of benzene molecules
#param e - Number of steps in the equilibration step
#param p - Number of steps in the production step
#param i - Integrator
#param t - Thermostat
#param b - Barostat
#param k - maximum harmonic restraint constant
#param L - lambda value for the harmonic restraint (%) (should be zero)

#NOTE: By definition, the simulations will be temperature coupled

SETRUN_ARGS="$@"
#Default Values
polymorph_num="all"
TEMP=-1
MINVOLUME=-1
MAXVOLUME=-1
VSPACING=-1
MOLECULES=256
equil_steps=30000
prod_steps=200000
integrator="md"
thermostat="v-rescale"
barostat=-1
k_max=1000
Lambda=0

#options passed in from the users
while getopts "n:S:B:s:T:P:N:e:p:i:t:b:k:L:" opt; do
        case $opt in
        n )
                polymorph_num=$OPTARG
                ;;
        S )
                MINVOLUME=$OPTARG
                ;;
	B )
		MAXVOLUME=$OPTARG
		;;
	s )
		VSPACING=$OPTARG
		;;
	T )
		TEMP=$OPTARG
		;;
        P )
                PRESSURE=$OPTARG
                ;;
        N )
                MOLECULES=$OPTARG
                ;;
        e )
                equil_steps=$OPTARG
                ;;
        p )
                prod_steps=$OPTARG
                ;;
        i )
                integrator=$OPTARG
                ;;
        t )
                thermostat=$OPTARG
                ;;
        b )
                barostat=$OPTARG
                ;;
	k )
                k_max=$OPTARG
                ;;
        L )
                Lambda=$OPTARG
                ;;
        esac
done

#Ensure that the parameters are properly entered

#POLYMORPH NUMBER
if [ $polymorph_num != "p1" ] && [ $polymorph_num != "p2" ] && [ $polymorph_num != "p3" ] && [ $polymorph_num != "all" ]; then
        echo "Unrecognized polymorph Number: $polymorph_num"
        exit 1
fi

#VOLUME
if [ $MINVOLUME == -1 ] || [ $MAXVOLUME == -1 ] || [ "$MINVOLUME" -gt "$MAXVOLUME" ]; then
        echo "Minimum Volume: $MINVOLUME"
        echo "Maximum Volume: $MAXVOLUME"
        echo "Is not a valid volume range!"
        exit 1
fi
if [ $VSPACING == -1 ]; then
        echo "Invalid Volume Spacing: $VSPACING"
        exit 1
fi


#TEMPERATURE
if [ $TEMP == -1 ]; then
	echo "Invalid temperature: $TEMP"	
	exit 1
fi 

#NUMBER OF MOLECULES
if [ $MOLECULES != 256 ] && [ $MOLECULES != 108 ]; then
        echo "Unsupported number of molecules: $MOLECULES"
        exit 1
fi

#NUMBER OF EQUILIBRATION TIMESTEPS
#if [ N != 256 ]
#        echo "Unsupported number of molecules: $MOLECULES"
#        exit 1
#fi

#NUMBER OF PRODUCTION TIMESTEPS
#if [ MOLECULES != 256 ]
#        echo "Unsupported number of molecules: $MOLECULES"
#        exit 1
#fi

#INTEGRATOR
if [ $integrator != "md" ] && [ $integrator != "md-vv" ]; then
        echo "Unrecognized integrator: $integrator"
        exit 1
fi

#SPRING CONSTANT
if [ $k_max -lt 0 ]; then
        echo "Invalid spring constant: $k_max"
        exit 1
fi

#LAMBDA POINT
if [ $Lambda -lt 0 ] || [ $Lambda -gt 100 ]; then
        echo "Invalid Lambda point: $Lambda"
        exit 1
fi

#Loop over all temperatures and set up a job
VOL=$MINVOLUME
while [ "$TEMP" -lt "$MAXTEMP" ]; do
	if [ $polymorph_num == "p1" ]; then
		setup_benzene -n p1 -T $TEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $VOL
	elif [ $polymorph_num == "p2" ]; then
		setup_benzene -n p2 -T $TEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $VOL
	elif [ $polymorph_num == "p3" ]; then
		setup_benzene -n p3 -T $TEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $VOL
	else
		setup_benzene -n p1 -T $TEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $VOL
		setup_benzene -n p2 -T $TEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $VOL
		setup_benzene -n p3 -T $TEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $VOL
	fi
	let "VOL=$VOL+$VSPACING"
done

#Catch the final temperature off-by-one exception
if [ $polymorph_num == "p1" ]; then
	setup_benzene -n p1 -T $MAXTEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $MAXVOLUME
elif [ $polymorph_num == "p2" ]; then
        setup_benzene -n p2 -T $MAXTEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $MAXVOLUME
elif [ $polymorph_num == "p3" ]; then
        setup_benzene -n p3 -T $MAXTEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $MAXVOLUME
else
        setup_benzene -n p1 -T $MAXTEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $MAXVOLUME
        setup_benzene -n p2 -T $MAXTEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $MAXVOLUME
        setup_benzene -n p3 -T $MAXTEMP -N $MOLECULES -e $equil_steps -p $prod_steps -k $k_max -W $Lambda -S $Lambda -s 10 -L $Lambda -V $MAXVOLUME
fi

