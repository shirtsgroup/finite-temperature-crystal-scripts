#!/bin/bash
#BASH SCRIPT TO REWEIGHT AN MD SIMULATION IN A TINKER POTENTIAL
#param f - The name of the input TRR file
#param p - The name of the potentials to examine
#param o - The name of the output.xvg file
#param d - The number of intermediate interpolation states in the potential(s)
#param s - Which software did we simulate in? (gromacs/tinker)
#param I - How many independent benzenes are in the gro files? (Gromacs only)

# Path to template files
export RUNFILES_LOC="/home/ecd4bd/runfiles"

# Path to Tinker parameters
export Tinker_params="/home/nabraha2/tinker/params"

# Gromacs commands
export GRO_grompp="gmx grompp"
export GRO_mdrun="gmx mdrun"
export GRO_energy="gmx energy"
export GRO_trjconv="gmx trjconv"

SETRUN_ARGS="$@"
inputfile="PROD"
potentials="amoeba09"
#potentials="amoeba09 amoeba09mononp amoeba09monop amoeba09multinp"
paramfile_amoeba09="amoeba09.prm"
paramfile_amoeba09monop="amoeba09_mono_p.prm"
paramfile_amoeba09mononp="amoeba09_mono_np.prm"
paramfile_amoeba09mononppt="amoeba09_mono_nppt.prm"
paramfile_amoeba09mononpoop="amoeba09_mono_npoop.prm"
paramfile_amoeba09mononpopls="amoeba09_mono_npopls.prm"
paramfile_amoeba09multinp="amoeba09_multi_np.prm"
paramfile_oplsaa="oplsaa.prm"
paramfile_oplsaa_fake="oplsaafake.prm"
outputfile="energy.xvg"
simulation="gromacs"
DSPACING="0"
EXPONENT=1
mode="full"

#=============================================================================================
# READ IN USER INPUTS
#=============================================================================================
while getopts "f:u:o:d:s:I:m:e:" opt; do
        case $opt in
        f )
                inputfile=$OPTARG
                ;;
	u)
		potentials=$OPTARG
		;;
        o )
                outputfile=$OPTARG
                ;;
	d )
                DSPACING=$OPTARG
                ;;
	s )
		simulation=$OPTARG
		;;
	I )
		INDEPENDENT=$OPTARG
		;;
	m )
		mode="energy"
		;;
	e )
		EXPONENT=$OPTARG
		;;
		
        esac
done


#=============================================================================================
# ENSURE THE INPUTS ARE CORRECT
#=============================================================================================
if [ "$simulation" != "gromacs" ] && [ "$simulation" != "tinker" ]; then
	echo "Invalid simulation type: $simulation"
	exit 1
fi

#if [ "${potentials/"amoeba09"}" == "$potentials" ] && [ "${potentials/"oplsaa"}" == "$potentials"  ] ; then
#	echo "Unsupported potentials: $potentials"
#	exit 1
#fi

#=============================================================================================
# DETERMINE THE MOLECULE FROM THE INPUT FILES
#=============================================================================================
if [ "$simulation" == "tinker" ]; then
   #Get the molecule from the key file
   molecule=$(less keyfile.key | grep "Molecule: " | awk '{print $3}')
else
   #Get the molecule from the topology file
   molecule=$(less topology.top | grep "solid" | awk '{print $1}')
fi
if [ "$molecule" == "benzene" ]; then
    apermol=12
elif [ "$molecule" == "glycin" ]; then
    apermol=10
    #paramfile_amoeba09="amoebapro13.prm"
elif [ "$molecule" == "acetac" ]; then
    apermol=8
elif [ "$molecule" == "hxacan" ]; then
    apermol=20
elif [ "$molecule" == "formam" ]; then
    apermol=6
elif [ "$molecule" == "imazol" ]; then
    apermol=9
elif [ "$molecule" == "cafine" ]; then
    apermol=24
elif [ "$molecule" == "zzzvye" ]; then
    apermol=15
elif [ "$molecule" == "dohfem" ]; then
    apermol=14
elif [ "$molecule" == "bismev" ]; then
    apermol=20
elif [ "$molecule" == "cbmzpn" ]; then
    apermol=30
elif [ "$molecule" == "sedtuq" ]; then
    apermol=14
else
    echo "Unrecognized molecule: $molecule"
    exit 1
fi

#=============================================================================================
# FORMAT THE INPUTS
#=============================================================================================

#Interpolations
delta=0
deltas=""
DeltaHinges=""
if [ "$DSPACING" -gt "0" ]; then
    for i in $(seq 0 $DSPACING); do
        delta=$(echo "scale=8;${i}/${DSPACING}" | bc | sed -r 's/^(-?)\./\10./')
        DeltaHinge=$(echo "scale=0;$i*100/${DSPACING}" | bc | sed -r 's/^(-?)\./\10./')
        if [ "$DeltaHinge" -lt 10 ]; then
                        DeltaHinge="00${DeltaHinge}D"
                elif [ "$DeltaHinge" -lt 100 ]; then
                        DeltaHinge="0${DeltaHinge}D"
                else
                        DeltaHinge="100D"
        fi
	delta=$(echo "scale=6; ($delta^$EXPONENT)" | bc | sed -r 's/^(-?)\./\10./')
        deltas="$deltas $delta"
        DeltaHinges="$DeltaHinges $DeltaHinge"
    done
else
    deltas="0"
    DeltaHinges="None"
fi

echo $deltas
echo $DeltaHinges


#=============================================================================================
# CREATE THE NECESSARY SAMPLE FRAMES THAT WILL BE RE-EVALUATED
#=============================================================================================
#If we simulated in gromacs, convert trajectory to tinker xyz files
if [ "$simulation" == "gromacs" ]; then
	#Determine the timestep between each output frame based on the mdp file
	dt=$(less production.mdp | grep -m 1 'dt' | awk '{print $3}')
	log=$(less production.mdp | grep -m 1 'nstxout' | awk '{print $3}')

	if [ "$mode" == 'energy' ]; then
		echo "Processing only the energy"
		cd TinkerXYZ
	else
		#Make a directory for the individual frames if it does not aleady exist
		mkdir TinkerXYZ
		
		#Convert the trr trajectory into a gro file using trjconv
		echo "0 0" | ${GRO_trjconv} -s pre_EQ.gro -f ${inputfile}.trr -o Traj.gro -pbc nojump -ndec 8

		##Map the trajectory if necessary
		#${SCRIPT_LOC}/kabschmany3.py -A benzene_restraint.gro -B B_0K.gro -C benzene_Traj.gro
		#mv benzene_Traj.gro benzene_Traj_orig.gro
		#mv run.mapped.gro benzene_Traj.gro 
		
		#Convert the trajectory into a set of full precision gro files using trjconv
		echo 0 | ${GRO_trjconv} -s pre_EQ.gro -f Traj.gro -o TinkerXYZ/frame.gro -sep -pbc nojump -ndec 8

		cd TinkerXYZ

		##Fix the periodic copies so that the molecules are in the correct periodic position
                #for file in $(ls *.gro); do
                #        echo "Fixing periodic copies in: $file"
                #        python ${SCRIPT_LOC}/fixpbc.py -f $file -r ../benzene_restraint.gro
                #done

		##Reshape the GRO file to match the box vectors in AMOEBA
                #for file in $(ls *.gro); do
		#	echo "Reshaping: $file"
                #        Volume=$(python ${SCRIPT_LOC}/calculate_volume.py -g $file)
                #        X=$(echo "scale=8; 0.270*$Volume" | bc | sed -r 's/^(-?)\./\10./')
                #        Y=$(echo "scale=8; 0.180*$Volume" | bc | sed -r 's/^(-?)\./\10./')
                #        Z=$(echo "scale=8; 0.270*$Volume" | bc | sed -r 's/^(-?)\./\10./')
		#	Boxvect="$X   $Y   $Z"
                #        python ${SCRIPT_LOC}/resize_gro.py -f $file -v "$Boxvect"
		#done

		#Convert each gro file into a pdb file
                for file in $(ls *.gro); do
                        echo "Converting ${file} to pdb..."
			filename=$(echo $file | cut -d '.' --complement -f2-)
                        echo 0 | ${GRO_trjconv} -f $file -s $file -o "${filename}.pdb" -pbc whole -ndec 8 > /dev/null
                done

		#Convert each pdb file into a tinker XYZ file
		string=$(less frame10.pdb | grep -m 1 "ATOM" | awk '{print $4}')
		for file in $(ls *.pdb); do 
			echo "Converting ${file} to xyz..."
			sed -i "/ATOM/{s/ $string /    0 /}" $file 
			pdbxyz $file ${TINKER_params}/${paramfile_amoeba09} > /dev/null
		done


		#Updgrade each tinker XYZ file into full precision
		for file in $(ls *.xyz); do
			echo "Upgrading ${file} to full precision..."
			filename=$(echo $file | cut -d '.' --complement -f2-)
			upgradexyz -g "${filename}.gro" -x $file
			python upgradexyz.py -x $file -n 10
		done

		#Add the box vectors to the second line of the xyz file if it is not in the gas phase
		if [ "$(less ../topology.top | grep -A 1 molecules | tail -1 | awk '{print $2}')" -gt "1" ]; then
		    for file in $(ls *.pdb); do
			xyzfile=$(echo $file | cut -d '.' --complement -f2-)
			xyzfile="${xyzfile}.xyz"
		        echo "Adding Box Vectors to ${file}..."
		        #Grab the box lengths from the pdb file
		        X=$(sed -n '4p' $file | awk '{print $2}')
		        Y=$(sed -n '4p' $file | awk '{print $3}')
		        Z=$(sed -n '4p' $file | awk '{print $4}')
		        #Grab the box angles from the pdb file
		        alpha=$(sed -n '4p' $file | awk '{print $5}')
		        beta=$(sed -n '4p' $file | awk '{print $6}')
		        gamma=$(sed -n '4p' $file | awk '{print $7}')

		        sed -i "2i     $X $Y $Z $alpha $beta $gamma" $xyzfile 
			done
		fi

		#Create one master key file
		if [ "$(less ../topology.top | grep -A 1 molecules | tail -1 | awk '{print $2}')" == "1" ]; then
                            cp ${RUNFILES_LOC}/gas.key keyfile.key
                    else
                            cp ${RUNFILES_LOC}/${molecule}.key keyfile.key
		fi

		

		##Create the key file for each xyz
		#for file in $(ls *.pdb); do
		#    keyfile=$(echo $file | cut -d '.' --complement -f2-)
		#    keyfile="${keyfile}_AMOEBA09.key"
		#    grofile=${file%.*}.gro
		#    echo "creating AMOEBA09 key file for ${file}..."
		#    if [ "$(less ../topology.top | grep -A 1 molecules | tail -1 | awk '{print $2}')" == "1" ]; then
		#    	    cp /home/ecd4bd/runfiles/gas.key $keyfile
		#    else
		#	    cp /home/ecd4bd/runfiles/${molecule}.key $keyfile
		#	    #Grab the box lengths from the pdb file
		#	    X=$(sed -n '4p' $file | awk '{print $2}')
		#	    #X=$(echo "scale=8;x=10*$X; if(x<1) print 0; x" | bc | sed -r 's/^(-?)\./\10./')
		#	    sed -i "s/XXXX/$X/g" $keyfile
		#	    Y=$(sed -n '4p' $file | awk '{print $3}')
		#	    #Y=$(echo "scale=8;x=10*$Y; if(x<1) print 0; x" | bc | sed -r 's/^(-?)\./\10./')
		#	    sed -i "s/YYYY/$Y/g" $keyfile
		#	    Z=$(sed -n '4p' $file | awk '{print $4}')
		#	    #Z=$(echo "scale=8;x=10*$Z; if(x<1) print 0; x" | bc | sed -r 's/^(-?)\./\10./')
		#	    sed -i "s/ZZZZ/$Z/g" $keyfile
		#	    #Grab the box angles from the pdb file
		#	    alpha=$(sed -n '4p' $file | awk '{print $5}')
		#	    sed -i "s/AAAA/$alpha/g" $keyfile
		#	    beta=$(sed -n '4p' $file | awk '{print $6}')
		#	    sed -i "s/BBBB/$beta/g" $keyfile
		#	    gamma=$(sed -n '4p' $file | awk '{print $7}')
		#	    sed -i "s/GGGG/$gamma/g" $keyfile
		#    fi
		#    #Change the parameter file if necessary
		#    if [ "$paramfile_amoeba09" != "amoeba09.prm" ]; then
		#	sed -i "s/amoeba09.prm/${paramfile_amoeba09}/g" $keyfile
		#    fi
		#done

		#Cut out all but the independent benzenes
		if [[ -s ../index.ndx ]]; then
                	for file in $(ls *.gro); do
                        	echo "Cutting extra molecules from: $file"
                        	python cut_dependent.py -f $file -n ../index.ndx
                	done
		fi

		#Add appropriate atom types to each xyz file if necessary
		if [ "$potentials" == "oplsaa" ]; then
                	addatomtypes -p "oplsaa"
		else
			addatomtypes -p "amoeba09"
		fi


	fi
#If we simulated in tinker, format each output file and move it to the TinkerXYZ directory
elif [ "$simulation" == "tinker" ]; then
	#Determine the timestep between each output frame based on the job_specs file
        dt=$(less job_specs.txt | grep OUTPUT | awk '{print $2}')
	if [ "$mode" == 'energy' ]; then
		echo "Processing only the energy"
		cd TinkerXYZ
	else
		#Make a directory for the individual frames if it does not aleady exist
                mkdir TinkerXYZ

		for file in $(ls molecule.* | grep -v molecule.xyz | grep -v molecule.dyn); do
			framenum=${file##*.}
			#Remove any leading zeroes
			framenum=$(expr $framenum + 0)
			echo "Moving ${file}..."
			cp $file TinkerXYZ/"frame${framenum}.xyz"
		done

		cd TinkerXYZ

		#Create the master key file
		cp ../keyfile.key keyfile.key

		##Create the key file for each xyz
		#for file in $(ls *.xyz); do
		#	keyfile=$(echo $file | cut -d '.' --complement -f2-)
            	#	keyfile="${keyfile}_AMOEBA09.key"
		#	echo "creating AMOEBA09 key file for ${file}..."
		#	cp ../keyfile.key $keyfile
		#done
		
		#Add appropriate atom types to each xyz file if necessary
                if [ "$potentials" == "oplsaa" ]; then
                        addatomtypes -p "oplsaa"
                else
                        addatomtypes -p "amoeba09"
                fi
	fi

fi

#=============================================================================================
# CALCULATE AMOEBA ENERGY
#=============================================================================================
if [ "$simulation" == "gromacs" ]; then
    extension="*.pdb"
elif [ "$simulation" == "tinker" ]; then
    extension="*.xyz"
fi

for potential in $potentials; do
	#Setup the keyhinge and parameter file
	keyhinge=$(echo $potential | tr [a-z] [A-Z])
        paramfile=${potential}.prm
	i=1
	for delta in $deltas; do #Loop over all interpolations
            delta_hinge=$(echo $DeltaHinges | cut -d" " -f${i})
            if [ "$delta_hinge" == "None" ]; then
                delta_hinge=""
		sed -i "s/\/params.*/\/params\/${paramfile}/g" keyfile.key
            else
		if [ -f ../restraint.key ]; then
		    cp ../restraint.key keyfile.key
		else
		    cp ../keyfile.key keyfile.key
		fi
                cp ${RUNFILES_LOC}/${potential}.prm param_reweighting.prm
		python interpolate_itp.py -f keyfile.key -d $delta
                python interpolate_itp.py -f param_reweighting.prm -d $delta
		sed -i "s/PARAMETERS.*/PARAMETERS param_reweighting.prm/g" keyfile.key
                delta_hinge="_${delta_hinge}"
            fi

		#Update the key for this potential
		#sed -i "s/\/params.*/\/params\/${paramfile}/g" keyfile.key

		#Calculate the energy of each frame in the AMOEBA potential and store it in a file
		energyfile=$(echo $paramfile | cut -d '.' --complement -f2-)
		energyfile=${energyfile}${delta_hinge}_energy.xvg
		echo "TIME(ps)      ENERGY           BOND           ANGLE        STRETCHBEND       OOP           TORSION       IMPROPER       PIORBITAL         VDW           MULTIPOLE       POLARIZATION     CHARGECHARGE      RESTRAINTS " > $energyfile
		echo "=====================" >> $energyfile
		echo "TIME(ps)    VOLUME" > volume.xvg
		echo "=====================" >> volume.xvg
		let "step=0"
		if [ -f "frame0.xyz" ]; then
		    frame=0
		else
		    frame=1
		fi

		fname="frame${frame}.xyz"
		while [ -f $fname ]; do
		    timestep=$(echo "x=$frame*$dt; if(x==0) print \"0.0\"; if(x<1 && x>0) print 0; x" | bc)
		    echo "Calculating the energy of ${fname}..."
		    if [ "$frame" == "1" ]; then
			analyze $fname -k keyfile.key e
		    fi
		    echo "$(/h3/n1/shirtsgroup/tinker/bin/analyze $fname -k keyfile.key  e)" > tempenergy.txt
		    volume=$(/h3/n1/shirtsgroup/tinker/bin/analyze $fname -k keyfile.key G | grep "Volume" | awk '{print $3}')
		    volume=$(echo "scale=8; ${volume}*0.001;" | bc | sed -r 's/^(-?)\./\10./') #Convert to nm^3
		    energy=$(less tempenergy.txt | grep "Potential Energy" | awk '{print $5}')
		    bond=$(less tempenergy.txt | grep "Bond Stretching" | awk '{print $3}')
		    angle=$(less tempenergy.txt | grep "Angle Bending" | awk '{print $3}')
		    stretchbend=$(less tempenergy.txt | grep "Stretch-Bend" | awk '{print $2}')
		    oop=$(less tempenergy.txt | grep "Out-of-Plane Bend" | awk '{print $3}')
		    torsion=$(less tempenergy.txt | grep "Torsional Angle" | awk '{print $3}')
		    itorsion=$(less tempenergy.txt | grep "Improper Torsion" | awk '{print $3}')
		    pi=$(less tempenergy.txt | grep "Pi-Orbital Torsion" | awk '{print $3}')
		    vdw=$(less tempenergy.txt | grep "Van der Waals" | awk '{print $4}')
		    multipole=$(less tempenergy.txt | grep "Atomic Multipoles" | awk '{print $3}')
		    polarization=$(less tempenergy.txt | grep "Polarization" | awk '{print $2}')
		    cc=$(less tempenergy.txt | grep "Charge-Charge" | awk '{print $2}')
		    rest=$(less tempenergy.txt | grep "Geometric Restraints" | awk '{print $3}')		

    
		    #If any numbers are blank, fill them with zero
		    if [ "$energy" == "" ]; then
			energy="0.00000000"
		    fi
		    if [ "$bond" == "" ]; then
			bond="0.00000000"
		    fi
		    if [ "$angle" == "" ]; then
			angle="0.00000000"
		    fi
		    if [ "$stretchbend" == "" ]; then
			stretchbend="0.00000000"
		    fi
		    if [ "$oop" == "" ]; then
			oop="0.00000000"
		    fi
		    if [ "$torsion" == "" ]; then
			torsion="0.00000000"
		    fi
		    if [ "$itorsion" == "" ]; then
                        itorsion="0.00000000"
                    fi
		    if [ "$pi" == "" ]; then
			pi="0.00000000"
		    fi
		    if [ "$vdw" == "" ]; then
			vdw="0.00000000"
		    fi
		    if [ "$multipole" == "" ]; then
			multipole="0.00000000"
		    fi
		    if [ "$polarization" == "" ]; then
			polarization="0.00000000"
		    fi
		    if [ "$cc" == "" ]; then
			cc="0.00000000"
		    fi
		    if [ "$rest" == "" ]; then
                        rest="0.00000000"
                    fi
		    echo "$timestep     $energy     $bond     $angle     $stretchbend     $oop     $torsion     $itorsion     $pi     $vdw     $multipole     $polarization     $cc     $rest" >> $energyfile
		    echo "$timestep	    $volume" >> volume.xvg
		    
		    let "frame=$frame+1"
		    fname="frame${frame}.xyz"
		done

		mv $energyfile ../$energyfile
		mv volume.xvg ../volume.xvg
		let "i=$i+1"
	done
	echo "$keyhinge Done!"
done
exit 1

