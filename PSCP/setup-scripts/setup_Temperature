#!/bin/bash

# BASH SCRIPT TO AUTOMATICALLY SET UP MD SIMULATIONS OVER A GIVEN RANGE OF TEMPERATURES
# By: Eric Dybeck 03/31/2014
# param C - Charges (supplied as a list in quotation marks separated by spaces)
# param n - polymorph number (all 3 will be used if none is given)
# param M - Molecule name
# param T - Temperature(s) in K
# param P - Pressure in bar
# param N - Number of molecules
# param I - Number of independent molecules (the remainder will be averaged)
# param e - Number of steps in the equilibration step
# param p - Number of steps in the production step
# param i - Integrator
# param t - Thermostat
# param b - Barostat
# param a - number of cores (threads) to run on
# param r - vdw/coulomb cutoff distance (in angstroms)
# param u - potential to be used in the simulation
# param z - specify which simulation package we will use (gromacs or tinker)
# param h - optional string hinge to add to the job
# param E - specify the Thermodynamic Ensemble that will be used
# param o - number of production outputs

# Path the template files. Submissions scripts (local and cluster) as well as crystal templates.
#export TEMPLATEPATH="/home/nabraham/crystals/NMA/runfiles"

#=============================================================================================
# SETUP DEFAULT VALUES AND READ IN PARAMETERS FROM USER
#=============================================================================================

SETRUN_ARGS="$@"
Charge="0.1150"
polymorph_num="p1 p2 p3"
MOLECULE="benzene"
TEMPERATURES="30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400"
PRESSURE=1
MOLECULES=72
INDEPENDENT="same"
equil_steps=1000000
prod_steps=10000000
integrator="sd"
thermostat="nose-hoover"
barostat="Parrinello-Rahman"
cores=7
k_max=1000
CUTOFF="8"
POTENTIAL="oplsaa"
SIMULATION="gromacs"
hinge="DefaultHinge"
ENSEMBLE="NPT"
PRODOUTPUTS=1000

#=============================================================================================
# User inputs
#=============================================================================================
while getopts "C:n:M:T:P:N:I:e:p:i:t:b:a:k:r:u:z:h:E:o:Z:" opt; do
        case $opt in
	C )
                Charge=$OPTARG
                ;;
        n )
                polymorph_num=$OPTARG
                ;;
      	M )
                MOLECULE=$OPTARG
                ;; 
	T )
		TEMPERATURES=$OPTARG
		;;
        P )
                PRESSURE=$OPTARG
                ;;
        N )
                MOLECULES=$OPTARG
                ;;
	I )
                INDEPENDENT=$OPTARG
                ;;
        e )
                equil_steps=$OPTARG
                ;;
        p )
                prod_steps=$OPTARG
                ;;
        i )
                integrator=$OPTARG
                ;;
        t )
                thermostat=$OPTARG
                ;;
        b )
                barostat=$OPTARG
                ;;
	a )
                cores=$OPTARG
                ;;
	E )
                ENSEMBLE=$OPTARG
                ;;
	k )
                k_max=$OPTARG
                ;;
	r )
                CUTOFF=$OPTARG
                ;;
	u )
                POTENTIAL=$OPTARG
                ;;
	z )
                SIMULATION=$OPTARG
                ;;	
        h )
                hinge=$OPTARG
                ;;
	o )
                PRODOUTPUTS=$OPTARG
		;;
	Z )
                TEMPLATEPATH=$OPTARG
		;;
        esac
done

export $TEMPLATEPATH

#=============================================================================================
# ENSURE THAT INPUTS HAVE BEEN PROPERLY ENTERED
#=============================================================================================
#INDEPENDENT MOLECULES
if [ "$INDEPENDENT" == "same" ] || [ "$INDEPENDENT" == "$MOLECULES" ]; then
    INDEPENDENT=$MOLECULES
    independenthinge="$MOLECULES"
else
    independenthinge="${INDEPENDENT}ind"
fi

#SYSTEM
files=$(ls ${TEMPLATEPATH}/*.gro | grep "_$MOLECULE_" | grep "_$polymorph_num_" | grep "_$MOLECULES" | grep "_$independenthinge")
if [ "$files" == "" ]; then
    echo "There are no available files in the runfiles directory for the combination: "
    echo "Molecule: $MOLECULE"
    echo "Polymorph: $polymorph_num"
    echo "Number: $MOLECULES"
    echo "Independent: $INDEPENDENT"
    exit 1
fi

#INTEGRATOR
if [ "$integrator" != "md" ] && [ "$integrator" != "md-vv" ] && [ "$integrator" != "sd" ]; then
	echo "Unrecognized integrator: $integrator"
        exit 1
fi

#SPRING CONSTANT
if [ $k_max -lt 0 ]; then
        echo "Invalid spring constant: $k_max"
        exit 1
fi

#CUTOFF RADIUS
if [ "$CUTOFF" -lt "0" ]; then
        echo "Invalid Cutoff Radius: $CUTOFF"
        exit 1
fi

#POTENTIAL
potentiallist=("oplsaa gromos designedg oplsaatodesignedg designeda oplsaatodesigneda day amoeba09 drude")
valid="false"
for pot in $potentiallist; do
    if [ "$POTENTIAL" == "$pot" ]; then
        valid="true"
    fi
done
if [ "$valid" == "false" ]; then
        echo "Unsupported potential: $POTENTIAL"
        echo "Supported potentials: $potentiallist"
        exit 1
fi

#ENSEMBLE
if [ "$ENSEMBLE" != "NVE" ] && [ "$ENSEMBLE" != "NVT" ] && [ "$ENSEMBLE" != "NPT" ]; then
        echo "Invalid Thermodynamic Ensemble: $ENSEMBLE"
        echo "Supported Ensembles: NVE, NVT, NPT"
        exit 1
fi

#HINGE
if [ "$hinge" == "DefaultHinge" ]; then
    hinge="DefaultHinge"
else
    hinge="$hinge"
fi

#=============================================================================================
# Setup Temperatures
#=============================================================================================
CODEPATH=$(dirname $0)

for poly in $polymorph_num; do
	mkdir "$poly/temperature"
	num=0
	for temp in $TEMPERATURES; do
		${CODEPATH}/setup_molecule -n $poly -T $temp -P $PRESSURE -M $MOLECULE -N $MOLECULES -I $INDEPENDENT -e $equil_steps -p $prod_steps -E $ENSEMBLE -i $integrator -t $thermostat -b $barostat -a $cores -c $Charge -K $k_max -r $CUTOFF -u $POTENTIAL -z $SIMULATION -h $hinge -o $PRODOUTPUTS -T $temp -J "$poly/temperature/"$num -Z $TEMPLATEPATH
		num=$((num + 1))
	done
done

