#!/bin/bash
#BASH SCRIPT TO CALCULATE THE ENERGY OF A GROMACS TRAJECTORY IN VARIOUS GROMACS POTENTIALS
#param f - The name of the input TRR file
#param u - The name of the potential(s) in which to re-evaluate the energies
#param o - The name of the output .xvg file
#param d - The number of intermediate interpolation states in the potential(s)
#param C - Charges in which to re-evaluate the energies
#param r - Cutoff distances to check for convergence
#param s - Which software package did we simulate in? (gromacs/tinker)


# Path to template files
#export RUNFILES_LOC="/home/nabraham/crystals/NMA/runfiles"
export RUNFILES_LOC="/blaahhhhahsh"

# Path to Tinker parameters
export Tinker_params="/home/nabraha2/tinker/params"

# Gromacs commands
export GRO_grompp="gmx grompp"
export GRO_mdrun="gmx mdrun"
export GRO_energy="gmx energy"
export GRO_trjconv="gmx trjconv"


#export DRUDE_LOC="/h3/n1/shirtsgroup/gromacs_drude/install/bin"


SETRUN_ARGS="$@"
#SET THE DEFAULT INPUT PARAMETER VALUES
inputfile="PROD"
potentials="oplsaa oplsaafakeg oplsaafakea oplsaafaked drude gromos"
DSPACING="0"
paramfile_oplsaa="oplsaa.ff"
paramfile_oplsaa_fake="oplsaafake.ff"
paramfile_gromos="gromos54a7.ff"
paramfile_amoeba="amoeba09.prm"
outputfile="energy.xvg"
simulation="gromacs"
mode="full"
molecule="benzene"
charges=("0.1150")
chargenames=("C01150")
cutoffs="None"
sigmaCs=("C100")
sigmaHs=("H100")
dt="1"

#=============================================================================================
# READ IN USER INPUTS
#=============================================================================================
while getopts "f:u:o:d:C:r:s:m:" opt; do
        case $opt in
        f )
                inputfile=$OPTARG
                ;;
	u)
		potentials=$OPTARG
		;;
        o )
                outputfile=$OPTARG
                ;;
	d )
                DSPACING=$OPTARG
                ;;
	C )
                charges=$OPTARG
                ;;
	r )
		cutoffs=$OPTARG
		;;
	s )
		simulation=$OPTARG
		;;
	m )
		mode="energy"
		;;
        esac
done


#=============================================================================================
# ENSURE THE INPUTS ARE CORRECT
#=============================================================================================
if [ "$simulation" != "gromacs" ] && [ "$simulation" != "tinker" ] && [ "$simulation" != "drude" ]; then
	echo "Invalid simulation type: $simulation"
	exit 1
fi

if [ "${potentials/"designedg"}" == "$potentials" ] && [ "${potentials/"oplsaa"}" == "$potentials"  ] && [ "${potentials/"gromos"}" == "$potentials"  ] && [ "${potentials/"designeda"}" == "$potentials"  ]; then
	echo "Unsupported potentials: $potentials"
	exit 1
fi
if [ "$DSPACING" -lt "0" ]; then
        echo "Invalid Delta Spacing: $DSPACING"
        exit 1
fi

#=============================================================================================
# FORMAT THE INPUTS
#=============================================================================================
chargenames=$(echo "$charges" | sed 's/0\./C0/g')

#Interpolations
delta=0
deltas=""
DeltaHinges=""
if [ "$DSPACING" -gt "0" ]; then
    for i in $(seq 0 $DSPACING); do
        delta=$(echo "scale=8;${i}/${DSPACING}" | bc | sed -r 's/^(-?)\./\10./')
        DeltaHinge=$(echo "scale=0;$i*100/${DSPACING}" | bc | sed -r 's/^(-?)\./\10./')
    	if [ "$DeltaHinge" -lt 10 ]; then
                        DeltaHinge="00${DeltaHinge}D"
                elif [ "$DeltaHinge" -lt 100 ]; then
                        DeltaHinge="0${DeltaHinge}D"
                else
                        DeltaHinge="100D"
        fi
    	deltas="$deltas $delta"
    	DeltaHinges="$DeltaHinges $DeltaHinge"
    done
else
    deltas="0"
    DeltaHinges="None"
fi

echo $deltas
echo $DeltaHinges

#=============================================================================================
# DETERMINE THE MOLECULE FROM THE INPUT FILES
#=============================================================================================
if [ "$simulation" == "tinker" ]; then
   #Get the molecule from the key file
   molecule=$(less keyfile.key | grep "Molecule: " | awk '{print $3}')
else
   #Get the molecule from the topology file
   molecule=$(less topology.top | grep "solid" | awk '{print $1}') 
fi
if [ "$molecule" == "benzene" ]; then
    apermol=12
elif [ "$molecule" == "glycin" ]; then
    apermol=10
elif [ "$molecule" == "acetac" ]; then
    apermol=8
elif [ "$molecule" == "hxacan" ]; then
    apermol=20
elif [ "$molecule" == "formam" ]; then
    apermol=6
elif [ "$molecule" == "imazol" ]; then
    apermol=9
elif [ "$molecule" == "cafine" ]; then
    apermol=24
elif [ "$molecule" == "zzzvye" ]; then
    apermol=15
elif [ "$molecule" == "dohfem" ]; then
    apermol=14
elif [ "$molecule" == "bismev" ]; then
    apermol=20
elif [ "$molecule" == "cbmzpn" ]; then
    apermol=30
elif [ "$molecule" == "sedtuq" ]; then
    apermol=14
elif [ "$molecule" == "resora" ]; then
    apermol=14
elif [ "$molecule" == "zzzpus" ]; then
    apermol=36
elif [ "$molecule" == "bedmig" ]; then
    apermol=30
elif [ "$molecule" == "qopbed" ]; then
    apermol=10
elif [ "$molecule" == "pyrzin" ]; then
    apermol=14
elif [ "$molecule" == "melfit" ]; then
    apermol=57
else
    echo "Unrecognized molecule: $molecule"
    exit 1
fi

#=============================================================================================
# CREATE THE NECESSARY SAMPLE FRAMES THAT WILL BE RE-EVALUATED
#=============================================================================================
#If we simulated in tinker, convert trajectory to gromacs .gro files
if [ "$simulation" == "tinker" ]; then
	#Determine the timestep between each output frame based on the job_specs file
	dt=$(less job_specs.txt | grep OUTPUT | awk '{print $2}')

	if [ "$mode" == 'energy' ]; then
		echo "Processing only the energy"
	else
		#Make a directory for the individual frames if it does not aleady exist
		mkdir TinkerGRO
		
		frames=0 #Keep track of the total number of frames
		for file in $(ls molecule.* | grep -v molecule.xyz | grep -v molecule.dyn); do
                        framenum=${file##*.}
                        #Remove any leading zeroes
                        framenum=$(expr $framenum + 0)
                        echo "Moving ${file}..."
                        cp $file TinkerGRO/"frame${framenum}.xyz"
			let "frames=$frames+1"
                done		
		#frames=10	
		cd TinkerGRO	
		#Convert each tinker xyz file into a pdb file
                for frame in $(seq 1 $frames); do
                        echo "Converting frame${frame}.xyz to pdb..."
                        xyzpdb frame${frame}.xyz ${Tinker_params}/${paramfile_amoeba} > /dev/null
                done
		
		#Convert each pdb file into a gro file
                for frame in $(seq 1 $frames); do
                        echo "Converting frame${frame}.pdb to gro..."
                        echo 0 | ${GRO_trjconv} -f frame${frame}.pdb -s frame${frame}.pdb -o "frame${frame}.gro" -pbc whole -ndec 8 -quiet > /dev/null
                done

		#Add the box vector to the bottom of the .gro file
		#Determine the timestep between each output frame based on the job_specs file
		for frame in $(seq 1 $frames); do
                        echo "Adding box vectors to frame${frame}.gro..."
			filename=$(echo $file | cut -d '.' --complement -f2-)
			python addboxvectors.py -g frame${frame}.gro -x frame${frame}.xyz -s 0.1
			#x=$(less "${filename}.xyz" | head -2 | tail -1 | awk '{print $1}')
			#y=$(less "${filename}.xyz" | head -2 | tail -1 | awk '{print $2}')
			#z=$(less "${filename}.xyz" | head -2 | tail -1 | awk '{print $3}')
			#
			##Scale the box vector back by a factor of 10
			#x=$(echo "scale=8;x=0.1*$x; if(x<1) print 0; x" | bc)
			#y=$(echo "scale=8;x=0.1*$y; if(x<1) print 0; x" | bc)
			#z=$(echo "scale=8;x=0.1*$z; if(x<1) print 0; x" | bc)
			#sed -i "s/0.00000000   0.00000000   0.00000000/ $x  $y  $z/g" $file
			#Change the extraneous time stamp of the gro file to the corect time
			time=$(echo "scale=8; $dt*$frame" | bc | sed -r 's/^(-?)\./\10./')
			#echo "Time: $time"
			sed -i "s/T=.*/t=   $time/g" frame${frame}.gro
			sed -i "s/t=.*/t=   $time/g" frame${frame}.gro
		done

		#Updgrade each gromacs GRO file into full precision
                for frame in $(seq 1 $frames); do
                       echo "Upgrading frame${frame}.gro to full precision..."
                       upgradegro -x "frame${frame}.xyz" -g frame${frame}.gro
                       python upgradegro.py -g frame${frame}.gro -n 0.1
                done

		##Reshape the GRO file to match the box vectors in Designed-Amoeba
		#for file in $(ls *.gro); do
		#	Volume=$(python ${SCRIPT_LOC}/calculate_volume.py -g $file)
		#	X=$(echo "scale=8; 1.485*$Volume" | bc | sed -r 's/^(-?)\./\10./')
                #        Y=$(echo "scale=8; 1.956*$Volume" | bc | sed -r 's/^(-?)\./\10./')
                #        Z=$(echo "scale=8; 1.469*$Volume" | bc | sed -r 's/^(-?)\./\10./')
		#	Boxvect="$X   $Y   $Z"
                #        python ${SCRIPT_LOC}/resize_gro.py -f $file -v "$Boxvect"
		#done
			

		#FIX FIX FIX FIX FIX
	
		#Expand the unit cell into a supercell so that it can be calculated with gromacs
		if [ $(less ../molecule.xyz | head -1 | awk '{print $1}') -lt "30" ]; then
		    echo "Gas Phase!"
		else
                    for frame in $(seq 1 $frames); do
                        echo "Expanding frame${frame}.gro to supercell..."
			X=$(less ../job_specs.txt | grep X-EXPANSION | awk '{print $2}')
			Y=$(less ../job_specs.txt | grep Y-EXPANSION | awk '{print $2}')
			Z=$(less ../job_specs.txt | grep Z-EXPANSION | awk '{print $2}')
			#Check if this is polymorph 2 (in a very kluge way)
			python unitcell_to_supercell.py -g frame${frame}.gro -o frame${frame}.gro -l $X -w $Y -z $Z
                    done

		fi

		#Now remove the spurious COM motion from each frame
                for frame in $(seq 1 $frames); do
                    echo "Removing COM displacement from frame${frame}.gro..."
                    python removeCOM.py -f frame${frame}.gro
                done


		#Now staple together the original gro files into one large gro file
                rm Traj.gro
                for frame in $(seq 1 $frames); do
                        echo "Adding frame${frame}.gro to Traj_orig.gro..."
                        less fixed_frame${frame}.gro >> Traj_orig.gro
                done

		mv Traj_orig.gro ../Traj.gro
		##Map the individual gro files if necessary
		#for frame in $(seq 1 $frames); do
		#	${SCRIPT_LOC}/kabschmany3.py -A frame${frame}.gro -B ../B_0K.gro -C frame${frame}.gro
                #	mv run.mapped.gro frame${frame}.gro
		#done

		##Now staple together the gro files into one large gro file
		#rm benzene_Traj.gro
		#for frame in $(seq 1 $frames); do
		#	echo "Adding frame${frame}.gro to benzene_Traj.gro..."
		#	less fixed_frame${frame}.gro >> benzene_Traj.gro
		#done

		##Map the trajectory if necessary
                ##${SCRIPT_LOC}/kabschmany3.py -A ../A_0K.gro -B ../B_0K.gro -C benzene_Traj.gro
		##mv benzene_Traj.gro benzene_Traj_orig.gro
		##mv run.mapped.gro benzene_Traj.gro

		##Remove the now unnecessary xyz, pdb, and gro files
		#for frame in $(seq 2 $frames); do
		#	rm frame${frame}.xyz
		#	rm frame${frame}.pdb
		#	rm frame${frame}.gro

		#done

		cd ..

	fi

elif [ "$simulation" == "drude" ]; then
    #Determine the timestep between each output frame based on the mdp file
        dt=$(less benzene_production.mdp | grep -m 1 'dt' | awk '{print $3}')
        log=$(less benzene_production.mdp | grep -m 1 'nstxout' | awk '{print $3}')

        if [ "$mode" == 'energy' ]; then
                echo "Processing only the energy"
                #cd DrudeGRO
        else
                #Make a directory for the individual frames if it does not aleady exist
                mkdir DrudeGRO

                #Convert the trajectory into a set of full precision gro files using trjconv
                echo 0 | ${DRUDE_LOC}/${GRO_trjconv} -f ${inputfile}.trr -s ${inputfile}.tpr -o DrudeGRO/frame.gro -sep -pbc whole -ndec 8

		
		#Remove the drude particles from each frame
		cd DrudeGRO
		for file in *.gro; do
		    python remove_drude.py -g $file
		done 
		cd ..
        fi

fi

#=============================================================================================
# REWEIGHT TO THE TARGET POTENTIALS
#=============================================================================================
for potential in $potentials; do
    #Copy over the appropriate itp file and topology file
    echo "Copying itp and topology file..."
#    cp ${RUNFILES_LOC}/${molecule}_${potential}.itp ${potential}.itp
    cp ../../../${molecule}_${potential}.itp ${potential}.itp

    if [ -f topology.top ]; then
        cp topology.top reweighting_topology.top
	sed -i "s/molecule.itp/${potential}.itp/g" reweighting_topology.top
    else
	cp ${RUNFILES_LOC}/topology.top reweighting_topology.top
        if [ "$(less molecule.xyz | head -1 | awk '{print $1}')" -lt "30" ]; then
            cp ${RUNFILES_LOC}/${molecule}_production_gas.mdp production.mdp
	    sed -i "s/NUMNUMNUM/1/g" reweighting_topology.top
        else
            cp ${RUNFILES_LOC}/${molecule}_production.mdp production.mdp
	    atoms=$(sed -n '2p' Traj.gro | awk '{print $1}')
	    mols=$(echo "$atoms/$apermol" | bc)
	    sed -i "s/NUMNUMNUM/$mols/g" reweighting_topology.top
	    
        fi
	sed -i "s/POTPOTPOT/$potential/g" reweighting_topology.top
	sed -i "s/MOLMOLMOL/$molecule/g" reweighting_topology.top
    fi
    #sed -i "s/oplsaa.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "s/oplsaafakeg.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "s/oplsaafakegd.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "s/oplsaafaked.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "s/oplsaafakea.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "s/gromos54a7.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "s/drude.ff/${potential}.ff/g" reweighting_topology.top
    #sed -i "/forcefield.itp/c\\#include \"${potential}.ff\/forcefield.itp\"" reweighting_topology.top
    #sed -i "s/#include \"benzene.*/#include \"${potential}.itp\"/g" reweighting_topology.top

    #Remove any symmetry averaging if it is included
    less production.mdp | grep -v "ave-group" | grep -v "ave-ngroup" | grep -v "symmetry-averaging" > production_reweighting.mdp

    #Remove drude oscillators if it is included
    sed -i 's/drude           = yes/drude           = no/g' production_reweighting.mdp

    #Grab the original charge number
    oldcharge=$(less ${potential}.itp | grep 1.008 | head -1 | awk '{print $7}')
    oldsigmaC=$(less ${potential}.itp | grep 12.011 | head -1 | awk '{print $2}')
    oldsigmaH=$(less ${potential}.itp | grep 1.008 | head -1 | awk '{print $2}')
    i=1

    if [ "$simulation" == "gromacs" ]; then
        #Setup the rerun files
	echo "Rerunning the trajectory file..."
	for delta in $deltas; do #Loop over all interpolations
	    delta_hinge=$(echo $DeltaHinges | cut -d" " -f${i})
	    if [ "$delta_hinge" == "None" ]; then
                delta_hinge=""
            else
#		cp ${RUNFILES_LOC}/${molecule}_${potential}.itp ${potential}.itp
		cp ../${molecule}_${potential}.itp ${potential}.itp
                python ../setup-scripts/interpolate_itp.py -f ${potential}.itp -d $delta
                delta_hinge="_${delta_hinge}"
            fi
	    for cutoff in $cutoffs; do #Loop over all cutoffs
		if [ "$cutoff" == "None" ]; then
		    cutoff_hinge=""
		else
		    rcouls=$(less production_reweighting.mdp | grep "rcoulomb-switch          =" | awk '{print $3}')
		    rcoul=$(less production_reweighting.mdp | grep "rcoulomb                 =" | awk '{print $3}')
		    rvdw=$(less production_reweighting.mdp | grep "rvdw                     =" | awk '{print $3}')
		    rnew=$(echo "scale=2;0.1*${cutoff}" | bc | sed -r 's/^(-?)\./\10./') 
		    rnewcouls=$(echo "scale=2; $rnew - 0.02" | bc | sed -r 's/^(-?)\./\10./')
		    sed -i "s/rcoulomb-switch          =.*/rcoulomb-switch          = $rnewcouls/g" production_reweighting.mdp
		    sed -i "s/rcoulomb                 =.*/rcoulomb                 = $rnew/g" production_reweighting.mdp
		    sed -i "s/rvdw                     =.*/rvdw                     = $rnew/g" production_reweighting.mdp
		    cutoff_hinge="_r${cutoff}"
		fi
		    
		for charge in $charges; do #Loop over all charges
		    rm ${potential}energy.edr
		    charge_name=$(echo $chargenames | cut -d" " -f${i})
		    potname="${potential}${delta_hinge}${cutoff_hinge}"
		    #sed -i "s/-${oldcharge}    12.011/-${charge}    12.011/g" ${potential}.itp
		    #sed -i "s/${oldcharge}     1.008/${charge}     1.008/g" ${potential}.itp
		    #sed -i "s/${oldsigmaC}/opls_${sigmaC}/g" benzene_oplsaafakeg.itp
		    #sed -i "s/${oldsigmaH}/opls_${sigmaH}/g" benzene_oplsaafakeg.itp
		    ${GRO_grompp} -f production_reweighting.mdp -c EQ.gro -p reweighting_topology.top -o reweighting.tpr -maxwarn 10
		    ${GRO_mdrun}  -v -rerun PROD.trr -s reweighting.tpr -deffnm $potname -e ${potential}energy.edr
    
		    rm ${potname}.trr
		    rm reweighting.tpr
		    rm '#reweighting.tpr.1#'
		    rm '#mdout.mdp.1#'
    
		    #Output the potential energy to a file
		    echo -e "Potential\n1 2 3 4 5 7 8 6 9 10 0" | ${GRO_energy} -f ${potential}energy.edr -o "${potname}_energy.xvg"
    
		    oldcharge=$charge
		    oldsigmaC="opls_${sigmaC}"
		    oldsigmaH="opls_${sigmaH}"
		    let "i=$i+1"
		done
	    done
	done
    elif [ "$simulation" == "tinker" ]; then
	for delta in $deltas; do #Loop over all interpolations
            delta_hinge=$(echo $DeltaHinges | cut -d" " -f${i})
            if [ "$delta_hinge" == "None" ]; then
                delta_hinge=""
            else
                cp ${RUNFILES_LOC}/${potential}.itp ${potential}.itp
                python ../setup-scripts/interpolate_itp.py -f ${potential}.itp -d $delta
                delta_hinge="_${delta_hinge}"
            fi
	    for charge in $charges; do
	        charge_name=$(echo $chargenames | cut -d" " -f${i})
	        potname="${potential}${delta_hinge}"
	        rm TinkerGRO/${potname}_energy.xvg
	        echo "TIME(ps)    ENERGY" > TinkerGRO/${potname}_energy.xvg
	        echo "=====================" >> ${potname}energy.xvg
	        #sed -i "s/-${oldcharge}    12.011/-${charge}    12.011/g" ${potential}.itp
	        #sed -i "s/${oldcharge}     1.008/${charge}     1.008/g" ${potential}.itp

	        #Rerun on Traj.gro
	    	
		echo "Calculating trajectory energy..."
	    	${GRO_grompp} -f production_reweighting.mdp -c Traj.gro -p reweighting_topology.top -o reweighting.tpr -maxwarn 10
	    	${GRO_mdrun}  -v -rerun Traj.gro -s reweighting.tpr -deffnm ${potname} -e ${potential}energy.edr
	    	echo -e "Potential\n1 2 3 4 5 7 8 6 9 10 0" | ${GRO_energy} -f ${potential}energy.edr -o "${potname}_energy.xvg"
	    	rm ${potname}.trr
	    	#rm ${potname}.log
	    	#rm ${potential}energy.edr
	    	#let "frame=$frame+1"
	    	#fname="frame${frame}.gro"
	        #done
	        oldcharge=$charge
		let "i=$i+1"

            done
	done
    elif [ "$simulation" == "drude" ]; then
	for charge in $charges; do
	    charge_name=$(echo $chargenames | cut -d" " -f${i})
	    potname="${potential}_${charge_name}"
	    rm DrudeGRO/${potname}_energy.xvg
	    echo "TIME(ps)    ENERGY" > DrudeGRO/${potname}_energy.xvg
	    echo "=====================" >> ${potname}_energy.xvg
	    sed -i "s/-${oldcharge}    12.011/-${charge}    12.011/g" ${potential}.itp
	    sed -i "s/${oldcharge}     1.008/${charge}     1.008/g" ${potential}.itp

	    #Rerun on each .gro file
	    cd DrudeGRO
	    #cp ../benzene_PROD.tpr ../reweighting.tpr
	    frame=0
	    fname="frame${frame}_nodrude.gro"
	    while [ -f $fname ]; do
		echo "Calculating ${fname} energy..."
		${GRO_grompp} -f ../benzene_production_reweighting.mdp -c $fname -p ../reweighting_topology.top -o ../reweighting.tpr -maxwarn 10
		${GRO_mdrun} -v -rerun ${fname} -s ../reweighting.tpr -deffnm ${potname} -e ${potential}energy.edr
		#echo Potential | ${GRO_LOC}/g_energy_d -f ${potential}energy.edr -o "${potential}energy.xvg"
		echo -e "Potential\n1 2 3 4 5 7 8 6 9 10 0" | ${GRO_energy} -f ${potential}energy.edr -o "${potential}energy.xvg"
		energy=$(less ${potential}energy.xvg | tail -1 | awk '{print $2}')
		if [ $(less ../benzene.xyz | head -1 | awk '{print $1}') == "12" ]; then
		    echo "Gas Phase!"
		    #energy=$(less ${potname}.log | grep -A 1 Kinetic | tail -1 | awk '{print $3}')
		else
		    echo "Solid Phase!"
		    #If we are in the solid phase, scale the energies back by a factor of 9
		    #energy=$(echo "scale=8;${energy}/9;" | bc | sed -r 's/^(-?)\./\10./')
		fi
		if [ "$frame" == "0" ]; then
		    less ${potential}energy.xvg | head -n -1 > ${potname}_energy.xvg
		fi
		#timestep=$(echo "scale=8;$frame*$dt;" | bc | sed -r 's/^(-?)\./\10./')
		timestep=$(less $fname | head -1 | awk '{print $8}')
		sed -i "0,/1.000000/s/1.000000/$timestep/" ${potential}energy.xvg
		less ${potential}energy.xvg | tail -1 >> ${potname}_energy.xvg
		#echo "$timestep         $energy" >> ${potname}_energy.xvg
		rm ${potname}.trr
		rm ${potname}.log
		rm ${potential}energy.edr
		rm '${potential}energy.xvg.1#'
		rm '#mdout.mdp.1#'
		let "frame=$frame+1"
		fname="frame${frame}_nodrude.gro"
	    done
	    oldcharge=$charge
	    let "i=$i+1"
	    mv ${potname}_energy.xvg ../${potname}_energy.xvg
	    cd ..
	done

    fi
    echo "$potential Done!"
done

